-- **************************************************************************
-- Cycle-shared FIFO Parameterized Megafunction
--
--	Copyright (C) 1991-1997 Altera Corporation
--	Any megafunction design, and related net list (encrypted or decrypted),
--	support information, device programming or simulation file, and any other
--	associated documentation or information provided by Altera or a partner
--	under Altera's Megafunction Partnership Program may be used only to
--	program PLD devices (but not masked PLD devices) from Altera.  Any other
--	use of such megafunction design, net list, support information, device
--	programming or simulation file, or any other related documentation or
--	information is prohibited for any other purpose, including, but not
--	limited to modification, reverse engineering, de-compiling, or use with
--	any other silicon devices, unless such use is explicitly licensed under
--	a separate agreement with Altera or a megafunction partner.  Title to
--	the intellectual property, including patents, copyrights, trademarks,
--	trade secrets, or maskworks, embodied in any such megafunction design,
--	net list, support information, device programming or simulation file, or
--	any other related documentation or information provided by Altera or a
--	megafunction partner, remains with Altera, the megafunction partner, or
--	their respective licensors.  No other licenses, including any licenses
--	needed under any third party's intellectual property, are provided herein.
--
--	Version 1.0
--
-- **************************************************************************
--
-- Reads are performed on the first half of the clock cycle.
-- Reads are latched halfway through the clock cycle so that
-- the data to be read is available before the next clock cycle.
-- Writes are performed on the second half of the clock cycle.
--
-- **************************************************************************
--
-- PARAMETERS:
--		LPM_WIDTH				- the width of the data bus
--		LPM_NUMWORDS			- depth of fifo in width-bit words
-- INPUTS:
--		data[LPM_WIDTH-1..0]	- input data bus
--		wreq					- write request
--		rreq					- read request
--		clock					- system clock
--		clockx2					- two times system clock
--		clr						- asynchronous reset
--		threshlevel				- almost full set
-- OUTPUTS:
--		q[LPM_WIDTH-1..0] 		- output data bus
--		full					- fifo is full flag
--		empty					- fifo is empty flag
--		threshold				- fifo is almost full flag
--
-- **************************************************************************

INCLUDE "lpm_counter";
INCLUDE "lpm_compare";
INCLUDE "altram";

PARAMETERS
(
	LPM_WIDTH,
	LPM_NUMWORDS
);

CONSTANT WIDTHAD = LPM_NUMWORDS > 0 ? CEIL(LOG2(LPM_NUMWORDS)) : 0;

SUBDESIGN csfifo
(
	data[LPM_WIDTH-1..0]		: INPUT;
	q[LPM_WIDTH-1..0]			: OUTPUT;
	wreq						: INPUT;
	rreq						: INPUT;
	clock						: INPUT;
	clockx2						: INPUT;
	clr							: INPUT = GND;
	threshlevel[WIDTHAD-1..0]	: INPUT = GND;
	threshold					: OUTPUT;
	empty						: OUTPUT;
	full						: OUTPUT;
)

VARIABLE
	
	ram_block					: altram WITH (WIDTH=LPM_WIDTH, AD_WIDTH=WIDTHAD);	
	wr_ptr						: lpm_counter WITH (LPM_Width=WIDTHAD);	
	rd_ptr						: lpm_counter WITH (LPM_Width=WIDTHAD);
	wrt_buff[LPM_Width-1..0]	: DFF;
	wrq							: DFF;
	rrq							: DFF;
	rd_buff[LPM_WIDTH-1..0]		: DFFE;
	addr_mux[WIDTHAD-1..0]  	: NODE;
	
	status						: lpm_counter WITH (LPM_WIDTH=WIDTHAD+1);
	lfull	 					: NODE;
	lempty						: NODE;
	full_reg					: DFF;
	empty_reg					: DFF;

	IF (USED(threshlevel)) GENERATE
		level_comp				: lpm_compare WITH (LPM_WIDTH=WIDTHAD);
		llevel					: NODE;
		level_reg				: DFF;
	END GENERATE;
	emptycount[WIDTHAD..0]  	: NODE; 	                               
	
	cd_input					: DFF;
	cd_output					: DFF;
	
BEGIN   

	ASSERT (LPM_WIDTH > 0)
			REPORT "Value of LPM_WIDTH parameter must be greater than 0"
			SEVERITY ERROR
			HELP_ID LPM_CSFIFO_WIDTH;

	ASSERT (LPM_NUMWORDS > 1)
			REPORT "Value of LPM_NUMWORDS parameter must be greater than or equal to 2"
			SEVERITY ERROR
			HELP_ID LPM_CSFIFO_WIDTHAD;

	ASSERT (LPM_NUMWORDS == 2^CEIL(LOG2(LPM_NUMWORDS)))
			REPORT "Illegal value for LPM_NUMWORDS parameter (%) -- value must be a power of 2"
				LPM_NUMWORDS
			SEVERITY ERROR
			HELP_ID LPM_CSFIFO_POWER2;

-- **************************************************************************
-- Generate synchronous signal from clock ( == !clock )
--
 	cd_input.clk	= clock;
	cd_input		= VCC;
	cd_input.clrn	= !cd_output;
	cd_output.clk	= clockx2;
	cd_output.clrn	= cd_input;
	cd_output		= cd_input;

-- **************************************************************************
-- Latch rreq and wreq at the start of the clock cycle
--
	rrq		= rreq & !lempty;
	rrq.clk	= clock;
	wrq		= wreq & !lfull;  
	wrq.clk	= clock;

-- **************************************************************************
-- Latch data to be written at the start of the clock cycle
--
	wrt_buff[]		= data[];
	wrt_buff[].clk	= clock;
	wrt_buff[].clrn	= !clr;
	wrt_buff[].prn	= VCC;

-- **************************************************************************
-- Read and write pointers are implemented as counters
-- Read pointer is incremented halfway through the cycle
-- so that the read address is available halfway through the cycle
--
	wr_ptr.aclr		= clr;
	wr_ptr.aset		= GND;
	wr_ptr.clock	= clock; 
	wr_ptr.clk_en	= wrq;   
	wr_ptr.updown	= VCC;

	rd_ptr.aclr		= clr;
	rd_ptr.aset		= GND;
	rd_ptr.clock	= clockx2;
	rd_ptr.clk_en	= rrq & cd_input;
	rd_ptr.updown	= VCC;

-- **************************************************************************
-- Time multiplex the read and write addresses to the EAB address input
--
	IF ( !cd_input ) THEN
		addr_mux[] = rd_ptr.q[];
	ELSE
		addr_mux[] = wr_ptr.q[];
	END IF;
	
-- **************************************************************************
-- Write data to ram or read data from ram
--
	ram_block.data[]	= wrt_buff[];
	ram_block.we		= wrq & cd_input; -- write data on second half of cycle
	ram_block.address[]	= addr_mux[]; 
	ram_block.clockI	= clockx2;        -- twice per system clock cycle  

-- **************************************************************************
-- Latch output of last read 
-- Result of the read operation is latched halfway through the system cycle
-- so that it is available before the beginning of the next clock cycle
--
	rd_buff[]		= ram_block.q[];
	rd_buff[].ena	= rrq & cd_input; 
	rd_buff[].clrn	= !clr;
	rd_buff[].prn	= VCC;		  
	rd_buff[].clk	= clockx2;   
	q[]				= rd_buff[];

-- **************************************************************************
-- The status counter increments only when a write is performed without read
--
	status.clock	= clock;    
	status.clk_en	= ((wreq & !full) XOR (rreq & !empty)); 
	status.updown	= wreq;  
	status.aclr		= clr;
	status.aset		= GND;
	
	emptycount[] = GND;	

	IF (status.q[] == emptycount[]) THEN
		lempty = VCC;
	ELSE
		lempty = GND;
	END IF;

	lfull = status.q[WIDTHAD]; -- full output is MSB of status!

-- **************************************************************************
-- The full and empty outputs are latched halfway through the clock cycle
--
	full_reg		= lfull;
	full_reg.clk	= !cd_input;
	full_reg.clrn	= !clr;
	empty_reg		= lempty; 
	empty_reg.clk	= !cd_input;
	empty_reg.prn	= !clr;
	
	full			= full_reg;
	empty			= empty_reg;
	
-- **************************************************************************
-- If threshlevel inputs are used, then implement comparison logic to
-- generate threshhold output signal
-- If threshlevel inputs are not used, the threshhold output
-- defaults to the same value as the full output signal
--
	IF (USED(threshlevel)) GENERATE
		level_comp.dataa[] = status.q[WIDTHAD-1..0];
		level_comp.datab[] = threshlevel[];
		llevel = level_comp.ageb # lfull;
	
		level_reg		= llevel;
		level_reg.clk	= !cd_input;
		level_reg.clrn	= !clr;
		threshold		= level_reg;     
	ELSE GENERATE
		threshold		= full_reg; 
	END GENERATE;
END;

