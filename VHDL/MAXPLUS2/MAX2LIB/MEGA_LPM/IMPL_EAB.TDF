--------------------------------------------------------------------
--
--	IMPL_EAB: Parameterized Megafunction 
--              For use only by IMPLEMENT_IN_EAB logic option
--
--	Copyright (C) 1991-1997 Altera Corporation
--	Any megafunction design, and related net list (encrypted or decrypted),
--	support information, device programming or simulation file, and any other
--	associated documentation or information provided by Altera or a partner
--	under Altera's Megafunction Partnership Program may be used only to
--	program PLD devices (but not masked PLD devices) from Altera.  Any other
--	use of such megafunction design, net list, support information, device
--	programming or simulation file, or any other related documentation or
--	information is prohibited for any other purpose, including, but not
--	limited to modification, reverse engineering, de-compiling, or use with
--	any other silicon devices, unless such use is explicitly licensed under
--	a separate agreement with Altera or a megafunction partner.  Title to
--	the intellectual property, including patents, copyrights, trademarks,
--	trade secrets, or maskworks, embodied in any such megafunction design,
--	net list, support information, device programming or simulation file, or
--	any other related documentation or information provided by Altera or a
--	megafunction partner, remains with Altera, the megafunction partner, or
--	their respective licensors.  No other licenses, including any licenses
--	needed under any third party's intellectual property, are provided herein.
--
--
--------------------------------------------------------------------

INCLUDE "altrom.inc";
PARAMETERS
(
	WIDTH,
	AD_WIDTH,
	FILE
);
SUBDESIGN impl_eab
(
	address[AD_WIDTH-1..0]	: INPUT;
	clocko					: INPUT = VCC;
	clrno					: INPUT = GND;
	prno					: INPUT = GND;
	enao					: INPUT = GND;
	clocki					: INPUT = VCC;
	clrni					: INPUT = GND;
	prni					: INPUT = GND;
	enai					: INPUT = GND;
	q[WIDTH-1..0]			: OUTPUT;
)
VARIABLE
	eab	: altrom WITH (WIDTH = WIDTH, 
					AD_WIDTH = AD_WIDTH,
					NUMWORDS =2^AD_WIDTH,
					FILE = FILE,
					REGISTERINPUTMODE = "DEFAULT",
					IMPLEMENT_IN_EAB = "OFF");

	-- Generate flipflops for input address lines if needed
	IF (USED(clocko) & (USED(clrno) # USED(prno) # USED(enao))) GENERATE
		out_ff[WIDTH-1..0] : DFFE;
	END GENERATE;

	-- Generate flipflops for input address lines if needed
	IF (USED(clocki) & (USED(clrni) # USED(prni) # USED(enai))) GENERATE
		in_ff[AD_WIDTH-1..0] : DFFE;
	END GENERATE;

BEGIN
	-- Connect address lines
	IF (USED(clocki)) GENERATE
		IF ((USED(clrni) # USED(prni) # USED(enai))) GENERATE
			-- If clrn and/or prn are used, then generate external
			-- Flipflops to support the input registers
			in_ff[].d = address[];
			in_ff[].clk = clocki;
			IF (USED(clrni)) GENERATE
				in_ff[].clrn = clrni;
			END GENERATE;
			IF (USED(prni)) GENERATE
				in_ff[].prn = prni;
			END GENERATE;
			IF (USED(enai)) GENERATE
				in_ff[].ena = enai;
			END GENERATE;
			eab.Address[] = in_ff[];
		ELSE GENERATE
			-- If clrn and/or prn are not used, the internal register
			-- can be used
			eab.address[] = address[];
			eab.clocki = clocki;
		END GENERATE;
	ELSE GENERATE
		-- If the inputs are not registers, use a regular ROM
		eab.address[] = address[];
	END GENERATE;

	-- Connect output data lines
	IF (USED(clocko)) GENERATE
		IF ((USED(clrno) # USED(prno) # USED(enao))) GENERATE
			-- If clrn and/or prn are used, then generate external
			-- Flipflops to support the output registers
			out_ff[].d = eab.q[];
			out_ff[].clk = clocko;
			IF (USED(clrno)) GENERATE
				out_ff[].clrn = clrno;
			END GENERATE;
			IF (USED(prno)) GENERATE
				out_ff[].prn = prno;
			END GENERATE;
			IF (USED(enao)) GENERATE
				out_ff[].ena = enao;
			END GENERATE;
			q[] = out_ff[];
		ELSE GENERATE
			-- If clrn and/or prn are not used, the internal register
			-- can be used
			q[] = eab.q[];
			eab.clocko = clocko;
		END GENERATE;
	ELSE GENERATE
		-- If the outputs are not registers, use a regular ROM
		q[] = eab.q[];
	END GENERATE;
END;
