--------------------------------------------------------------------
--
--	ALTRAM Parameterized Megafunction
--
--	Copyright (C) 1991-1997 Altera Corporation
--	Any megafunction design, and related net list (encrypted or decrypted),
--	support information, device programming or simulation file, and any other
--	associated documentation or information provided by Altera or a partner
--	under Altera's Megafunction Partnership Program may be used only to
--	program PLD devices (but not masked PLD devices) from Altera.  Any other
--	use of such megafunction design, net list, support information, device
--	programming or simulation file, or any other related documentation or
--	information is prohibited for any other purpose, including, but not
--	limited to modification, reverse engineering, de-compiling, or use with
--	any other silicon devices, unless such use is explicitly licensed under
--	a separate agreement with Altera or a megafunction partner.  Title to
--	the intellectual property, including patents, copyrights, trademarks,
--	trade secrets, or maskworks, embodied in any such megafunction design,
--	net list, support information, device programming or simulation file, or
--	any other related documentation or information provided by Altera or a
--	megafunction partner, remains with Altera, the megafunction partner, or
--	their respective licensors.  No other licenses, including any licenses
--	needed under any third party's intellectual property, are provided herein.
--
--	Version 1.0
--
--------------------------------------------------------------------

INCLUDE "memmodes.inc";			% Constants defining RAM mode flags %
INCLUDE "lpm_decode.inc";
INCLUDE "lpm_mux.inc";

CONSTANT NO_FILE = "/////";

PARAMETERS
(
	WIDTH,
	AD_WIDTH,
	NUMWORDS = 2^AD_WIDTH,
	FILE = NO_FILE,
	REGISTERINPUTMODE = "DEFAULT",
	USE_EAB = "ON",
	DEVICE_FAMILY
);

CONSTANT 10K_SLICE_SIZE = 2048;
CONSTANT MAX_NUMWORDS = 2^AD_WIDTH;
CONSTANT WORDS_PER_EAB = (MAX_NUMWORDS >= 10K_SLICE_SIZE) ?
							10K_SLICE_SIZE : MAX_NUMWORDS;
CONSTANT BITS_PER_EAB = (MAX_NUMWORDS >= 10K_SLICE_SIZE) ?
							1 : 10K_SLICE_SIZE div WORDS_PER_EAB;

CONSTANT RAM_DEPTH_IN_EABS	= (MAX_NUMWORDS > 10K_SLICE_SIZE) ?
								CEIL(NUMWORDS div 10K_SLICE_SIZE)	% Wider than 10K_SLICE_SIZE %
								: 1;	% Width <= 10K_SLICE_SIZE %
-- RAM width in EABs = CEIL(WIDTH div BITS_PER_EAB)
CONSTANT EXTRA_ADDR_BITS	= AD_WIDTH - LOG2(WORDS_PER_EAB);

% Figure out EAB mode if FLEX10K %
DEFINE RAM_MODES(dummy) =
	(USED(clocki) ? (REGISTERINPUTMODE == "ALL" # REGISTERINPUTMODE == "DEFAULT" ? RAM_REG_DATAIN # RAM_REG_ADDR # RAM_REG_CTRL
						: (REGISTERINPUTMODE == "ADDRESS_CONTROL" ? RAM_REG_ADDR # RAM_REG_CTRL
							: (REGISTERINPUTMODE == "DATA" ? RAM_REG_DATAIN : 0)))
		: 0)
	# (USED(clocko) ? RAM_REG_DATAOUT : 0);

% Are the address inputs registered? %
DEFINE ADDR_IS_REGD(dummy) =
	(USED(clocki) & ( REGISTERINPUTMODE == "ALL"
					# REGISTERINPUTMODE == "DEFAULT"
					# REGISTERINPUTMODE == "ADDRESS_CONTROL"));

SUBDESIGN altram
(
	we						: INPUT;
	data[WIDTH-1..0]		: INPUT;
	address[AD_WIDTH-1..0]	: INPUT;
	clocki					: INPUT = VCC;
	clocko					: INPUT = VCC;
	be						: INPUT = VCC;
	q[WIDTH-1..0]			: OUTPUT;
)
VARIABLE
	IF (DEVICE_FAMILY == "FLEX10K" & USE_EAB == "ON") GENERATE

		IF (FILE == NO_FILE) GENERATE
			content	: MEMORY
			(
				width			= WIDTH;
				depth			= NUMWORDS;
				segmentsize		= WORDS_PER_EAB;
				mode			= RAM_MODES(0);
			)
			OF SEGMENTS
			(
				segment[RAM_DEPTH_IN_EABS-1..0][Width-1..0]
			);
		ELSE GENERATE % With initialization file %
			content	: MEMORY
			(
				width			= WIDTH;
				depth			= NUMWORDS;
				segmentsize		= WORDS_PER_EAB;
				mode			= RAM_MODES(0) # RAM_INITIALIZED;
				file			= File;
			)
			OF SEGMENTS
			(
				segment[RAM_DEPTH_IN_EABS-1..0][WIDTH-1..0]
			);
		END GENERATE;

		IF (EXTRA_ADDR_BITS > 0) GENERATE
			IF (ADDR_IS_REGD(0)) GENERATE
				reg_iaddr[EXTRA_ADDR_BITS-1..0]	: DFF;
			END GENERATE;
			IF (USED(clocko)) GENERATE
				reg_oaddr[EXTRA_ADDR_BITS-1..0]	: DFF;
			END GENERATE;

			decoder		: lpm_decode WITH (	LPM_WIDTH=EXTRA_ADDR_BITS,
											LPM_DECODES=RAM_DEPTH_IN_EABS);
			mux			: lpm_mux WITH (LPM_WIDTH=WIDTH,
										LPM_SIZE=RAM_DEPTH_IN_EABS,
										LPM_WIDTHS=EXTRA_ADDR_BITS);
		END GENERATE;
		real_we[RAM_DEPTH_IN_EABS-1..0]	: node;
	ELSE GENERATE
		IF (NUMWORDS <= 256) GENERATE
			IF (USED(clocki)) GENERATE
				-- dffe array
				dffs[NUMWORDS-1..0][WIDTH-1..0]			: DFFE;
				ffaddress[AD_WIDTH-1..0]				: DFF;
			ELSE GENERATE
				-- latch array
				latches[NUMWORDS-1..0][WIDTH-1..0]		: LATCH;
			END GENERATE;
			mux		: lpm_mux WITH (LPM_WIDTH=WIDTH,
									LPM_SIZE=NUMWORDS,
									LPM_WIDTHS=AD_WIDTH);
			decode	: lpm_decode WITH (	LPM_WIDTH=AD_WIDTH,
										LPM_DECODES=NUMWORDS);
			
			IF USED(clocko) GENERATE
				reg_oaddr[WIDTH-1..0]	: DFF;
			END GENERATE;						
		END GENERATE;
	END GENERATE;

BEGIN

	ASSERT (WIDTH > 0)
			REPORT "Value of WIDTH parameter value must be greater than 0"
			SEVERITY ERROR
			HELP_ID RAM_WIDTH;

	ASSERT (AD_WIDTH > 0)
			REPORT "Value of AD_WIDTH parameter value must be greater than 0"
			SEVERITY ERROR
			HELP_ID RAM_AD_WIDTH;

	ASSERT (NUMWORDS > 0)
			REPORT "Value of NUMWORDS parameter value must be greater than 0"
			SEVERITY ERROR
			HELP_ID RAM_NUMWORDS;

	ASSERT (DEVICE_FAMILY == "FLEX10K" # NUMWORDS <= 256)
                REPORT  "Current device family (%) does not support more than 256 memory words" DEVICE_FAMILY
		SEVERITY ERROR
		HELP_ID	ALTRAM_NUMWORDS256;

	ASSERT (DEVICE_FAMILY != "FLEX10K" # USE_EAB == "ON" # NUMWORDS <= 256)
                REPORT  "Current device family (%) does not support more than 256 memory words unless the USE_EAB parameter is not turned off" DEVICE_FAMILY
		SEVERITY ERROR
		HELP_ID	ALTRAM_NUMWORDS256_10K;


	ASSERT (NUMWORDS > 2^(AD_WIDTH-1) & NUMWORDS <= 2^AD_WIDTH)
			REPORT "Value of NUMWORDS parameter requires % address lines, but AD_WIDTH value, which defines the number of address lines, is %"
				CEIL(LOG2(NUMWORDS)), AD_WIDTH
			SEVERITY ERROR
			HELP_ID RAM_NUMWORDS_TOO_BIG;

	ASSERT (  (REGISTERINPUTMODE == "ALL")
			# (REGISTERINPUTMODE == "ADDRESS_CONTROL")
			# (REGISTERINPUTMODE == "DEFAULT")
			# (REGISTERINPUTMODE == "DATA"))
			REPORT "Illegal value for REGISTERINPUTMODE parameter (%) -- value must be ALL, ADDRESS_CONTROL, DEFAULT, or DATA" 
				REGISTERINPUTMODE
			SEVERITY ERROR
			HELP_ID RAM_INVALID_INPUT_MODE;

	ASSERT (USED(clocki) # (REGISTERINPUTMODE == "DEFAULT"))
			REPORT "Value of REGISTERINPUTMODE parameter (%) is not consistent with the use of the clocki port"
				REGISTERINPUTMODE
			SEVERITY ERROR
			HELP_ID RAM_REG_INPUT_NEEDS_CLOCK;

	ASSERT (DEVICE_FAMILY == "FLEX10K" # USED(clocki))
		REPORT "Current device family (%) does not support asynchronous RAM -- implementing the asynchronous RAM as a latch array instead"
			DEVICE_FAMILY
		SEVERITY WARNING
		HELP_ID RAM_LATCH;

	ASSERT (DEVICE_FAMILY == "FLEX10K" # USED(clocki) == 0)
		REPORT "Current device family (%) does not support synchronous RAM -- implementing the synchronous RAM as a DFFE array instead"
			DEVICE_FAMILY
		SEVERITY WARNING
		HELP_ID RAM_DFFE;

	ASSERT (DEVICE_FAMILY == "FLEX10K" & USE_EAB == "ON"
			# USED(clocki) == 0
			# REGISTERINPUTMODE == "ALL"
			# REGISTERINPUTMODE == "DEFAULT")
			REPORT "Can't create synchronous RAM from a DFFE array unless all inputs are registered"
			SEVERITY ERROR
			HELP_ID RAM_DFFE_ALL_SYNC;

	ASSERT (FILE == NO_FILE
			# DEVICE_FAMILY == "FLEX10K" & USE_EAB == "ON")
			REPORT "Ignored FILE parameter -- the % device family does not support RAM initialization"
				DEVICE_FAMILY
			SEVERITY WARNING
			HELP_ID RAM_INIT_FILE;

	IF (DEVICE_FAMILY == "FLEX10K" & USE_EAB == "ON") GENERATE
		IF (EXTRA_ADDR_BITS > 0) GENERATE
			% Connect address decoder %
			decoder.data[] = address[AD_WIDTH-1..AD_WIDTH-EXTRA_ADDR_BITS];
			decoder.enable = be;

			% bank select logic for WE signal %
			real_we[] = decoder.eq[] & we;
			
			% Registered address and control inputs? %
			IF (ADDR_IS_REGD(0)) GENERATE
				reg_iaddr[].clk = clocki;
				reg_iaddr[].d = address[AD_WIDTH-1..AD_WIDTH-EXTRA_ADDR_BITS];
			END GENERATE;
			IF (USED(clocko)) GENERATE
				reg_oaddr[].clk = clocko;
				IF (ADDR_IS_REGD(0)) GENERATE
					reg_oaddr[].d = reg_iaddr[].q;
				ELSE GENERATE
					reg_oaddr[].d = address[AD_WIDTH-1..AD_WIDTH-EXTRA_ADDR_BITS];
				END GENERATE;
			END GENERATE;

			% Connect multiplexer ports %
			IF (USED(clocko)) GENERATE
				mux.sel[] = reg_oaddr[].q;
			ELSE GENERATE
				IF (ADDR_IS_REGD(0)) GENERATE
					mux.sel[] = reg_iaddr[].q;
				ELSE GENERATE
					% Nothing is registered %
					mux.sel[] = address[AD_WIDTH-1..AD_WIDTH-EXTRA_ADDR_BITS];
				END GENERATE;
			END GENERATE;
		ELSE GENERATE
			IF (USED(be)) GENERATE
				real_we[0] = we & be;
			ELSE GENERATE
				real_we[0] = we;
			END GENERATE;
		END GENERATE;

		-- Connect RAM ports

		FOR bank IN 0 TO RAM_DEPTH_IN_EABS-1 GENERATE
			segment[bank][].d 		= data[];
			FOR bit IN 0 TO WIDTH-1 GENERATE
				segment[bank][bit].a[] 	= address[LOG2(WORDS_PER_EAB)-1..0];
				
				% Using input clock? %
				IF (USED(clocki)) GENERATE
					segment[bank][bit].clki = clocki;
				END GENERATE;

				% Using output clock? %
				IF (USED(clocko)) GENERATE
					segment[bank][bit].clko = clocko;
				END GENERATE;

				% connect decoded WE signal %
				segment[bank][bit].we 	= real_we[bank];
			END GENERATE;

			% define multiplexer inputs %
			IF (EXTRA_ADDR_BITS > 0) GENERATE
				mux.data[bank][] = segment[bank][].q;
			END GENERATE;
		END GENERATE;

		% define the output group %
		IF (EXTRA_ADDR_BITS > 0) GENERATE
			q[] = mux.result[];
		ELSE GENERATE
			q[] = segment[0][].q;
		END GENERATE;
	ELSE GENERATE

		--
		--	Not a FLEX10K device, so use DFF or latch array
		--
		IF (USED(clocki)) GENERATE
			% Create a DFFE array to mimic a synchronous RAM %
			dffs[][].clk = clocki;
			ffaddress[].clk = clocki;
			ffaddress[].d = address[];
			decode.data[] = address[];
			decode.enable = we & be;
			FOR eword IN 0 TO NUMWORDS-1 GENERATE
				dffs[eword][].d = data[];
				dffs[eword][].ena = decode.eq[eword];
			END GENERATE;
			mux.data[][] = dffs[][].q;
			mux.sel[] = ffaddress[];
		ELSE GENERATE
			% Create a latch array to mimic an asynchronous RAM %
			decode.data[] = address[];
			decode.enable = we & be;
			FOR eword IN 0 TO NUMWORDS-1 GENERATE
				latches[eword][].d = data[];
				latches[eword][].ena = decode.eq[eword];
			END GENERATE;
			mux.data[][] = latches[][].q;
			mux.sel[] = address[];
		END GENERATE;

		% Need to register outputs? %
		IF USED(clocko) GENERATE
			reg_oaddr[] = mux.result[];
			q[] = reg_oaddr[];
			reg_oaddr[].clk = clocko;
		ELSE GENERATE
			q[] = mux.result[];
		END GENERATE;

	END GENERATE;
END;
