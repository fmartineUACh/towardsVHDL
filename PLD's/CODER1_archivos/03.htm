<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0047)http://det.bp.ehu.es/vhdl/pagina/express/03.htm -->
<HTML><HEAD><TITLE>Práctica 3: Codificador</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META content="Daniel Jiménez Iglesias          danieljimenez@mailcity.com" 
name=Author>
<META content="Daniel Jiménez Iglesias y Juan Carlos Cárdenas Bonelli" 
name=Author>
<META content="Juan Carlos Cárdenas Bonelli     juanky.cardenas@mailcity.com" 
name=Author>
<META content="MSHTML 5.50.4134.100" name=GENERATOR></HEAD>
<BODY vLink=#800080 link=#0000ff bgProperties=fixed 
background=03_archivos/fondo00.jpg>
<SCRIPT language=JavaScript><!--
MSFPhover = 
  (((navigator.appName == "Netscape") && 
  (parseInt(navigator.appVersion) >= 3 )) || 
  ((navigator.appName == "Microsoft Internet Explorer") && 
  (parseInt(navigator.appVersion) >= 4 ))); 
function MSFPpreload(img) 
{
  var a=new Image(); a.src=img; return a; 
}
// -->

</SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav1n=MSFPpreload('boto10.jpg'); 
MSFPnav1h=MSFPpreload('boto11.jpg'); }
// --></SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav2n=MSFPpreload('boto20.jpg'); 
MSFPnav2h=MSFPpreload('boto21.jpg'); }
// --></SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav3n=MSFPpreload('boto30.jpg'); 
MSFPnav3h=MSFPpreload('boto31.jpg'); }
// --></SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav4n=MSFPpreload('boto40.jpg'); 
MSFPnav4h=MSFPpreload('boto41.jpg'); }
// --></SCRIPT>

<DIV align=center>
<CENTER>
<TABLE height=575 cellSpacing=5 cellPadding=2 width="86%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center align=middle width="100%" height=98><A name=top></A><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/02.htm"><IMG height=49 
      alt=Demultiplexor src="03_archivos/image07.jpg" width=70 
      border=0></A><SMALL><IMG height=53 alt="Práctica 3: Codificador" 
      src="03_archivos/ex03-00.jpg" width=445 
      lowsrc=images/EX03-00.GIF></SMALL><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/04.htm"><IMG height=53 
      alt=Decodificador src="03_archivos/image08.jpg" width=75 
      border=0></A><BR>&nbsp; <BR>&nbsp; </TD></TR>
  <TR>
    <TD vAlign=center align=left width="100%" height=66><FONT face=Verdana 
      size=2>Un codificador es un dispositivo lógico que recibe información por 
      su entrada y la traduce a un código, el cual depende del tipo de 
      codificador. Tienen una serie de patillas de entrada de las cuales sólo 
      una se activa, apareciendo el número de la patilla activada a la salida en 
      el código correspondiente: Aiken, decimal, BCD, BCD+3,...</FONT></TD></TR>
  <TR>
    <TD vAlign=center align=middle width="100%" height=66>
      <P align=left><SMALL><FONT face=Verdana>A partir de ahora crearemos las 
      entidades y arquitecturas a la vez para trabajar de forma normal 
      prescindiremos de la columna de ayuda de la derecha.</FONT></SMALL></P>
      <P align=left><SMALL><FONT face=Verdana>Elige en la lista una práctica 
      para empezar, sin más que pinchar en el botón adecuado. Para volver pulsa 
      el botón que está al lado del título</FONT></SMALL></P><SMALL><FONT 
      face=Verdana>
      <P align=left></FONT></SMALL>&nbsp;</P></TD></TR>
  <TR>
    <TD align=middle width="100%" height=258>
      <TABLE height=189 width="88%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=center width="28%" height=40>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/03.htm#1"><IMG 
            height=29 alt="Entidad 1" src="03_archivos/enti1.jpg" width=200 
            border=0></A></P></TD>
          <TD vAlign=center width="72%" height=40><FONT face=Arial 
            size=3><STRONG>Codificador binario 4 a 2 sin 
            prioridad</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=40>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/03.htm#2"><IMG 
            height=29 alt="Arquitectura 1" src="03_archivos/arqui1.jpg" 
            width=200 border=0></A></P></TD>
          <TD vAlign=center width="72%" height=40><FONT face=Arial 
            size=3><STRONG>Codificador binario 4 a 2 sin 
            prioridad</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=40>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/03.htm#3"><IMG 
            height=29 alt="Entidad 2" src="03_archivos/enti2.jpg" width=200 
            border=0></A></P></TD>
          <TD vAlign=center width="72%" height=40><FONT face=Arial 
            size=3><STRONG>Codificador binario 8 a 3 con 
            prioridad</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=40>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/03.htm#4"><IMG 
            height=29 alt="Arquitectura 2" src="03_archivos/arqui2.jpg" 
            width=200 border=0></A></P></TD>
          <TD vAlign=center width="72%" height=40><FONT face=Arial 
            size=3><STRONG>Codificador binario 8 a 3 con 
            prioridad</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=40>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/03.htm#5"><IMG 
            height=29 alt="Entidad 3" src="03_archivos/enti3.jpg" width=200 
            border=0></A></P></TD>
          <TD vAlign=center width="72%" height=40><STRONG><FONT face=Arial 
            size=3>Codificador binario 16 a 4 con 
        interrupción</FONT></STRONG></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=20>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/03.htm#6"><IMG 
            height=29 alt="Arquitectura 3" src="03_archivos/arqui3.jpg" 
            width=200 border=0></A></P></TD>
          <TD vAlign=center width="72%" height=20><STRONG><FONT face=Arial 
            size=3>Codificador binario 16 a 4 con 
        interrupción</FONT></STRONG></TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD align=middle width="100%" height=1><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm#03"><IMG 
      height=24 alt="Pulsa aquí para simular los ejemplos construidos." 
      src="03_archivos/image03.jpg" width=611 lowsrc=image03.jpg 
  border=0></A></TD></TR></TBODY></TABLE></CENTER></DIV>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact color=#000000><BIG><BIG><A 
      name=1></A>Entidad 1: Codificador binario de 4 a 2 bits sin 
      prioridad</BIG></BIG></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/03.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="03_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif" size=3>Este codificador tiene una señal 
de cuatro bits (numerados del cero al tres) de entrada, y una de salida de dos. 
Según qué bit de los cuatro de la entrada esté seleccionado (esto es a nivel 
alto), saldrá a la salida un número o otro. Por ejemplo, si se selecciona 
el&nbsp; bit cero, a la salida tendremos "00", si se selecciona el bit uno, 
tendremos a la salida "01", y así sucesivamente.</FONT></P>
<TABLE cellSpacing=0 width="100%" bgColor=#ffcccc border=0>
  <TBODY>
  <TR>
    <TD vAlign=center width="53%" bgColor=#ffffff><FONT 
      face="OCR A Extended"><B>entity </B>coder<B> is port(</B><BR>dentro: 
      <STRONG>in&nbsp; bit_vector(3 downto 0);</STRONG><BR>fuera :<B> 
      </B><STRONG>out bit_vec</STRONG><B>tor(1 downto 0);<BR></B>error : 
      <STRONG>out bit</STRONG><B><BR></B><STRONG>);<BR>end</STRONG> 
    coder;</FONT></TD>
    <TD vAlign=center width="47%" bgColor=#ffffff><FONT 
      face="MS Sans Serif">Necesitamos una entrada de 4 bits 
      (<STRONG>dentro</STRONG>), una salida de dos bits 
      (<STRONG>fuera</STRONG>), y otra de uno llamada 
      <STRONG>error</STRONG>.</FONT></TD></TR></TBODY></TABLE>
<P align=center><IMG height=154 alt="Codificador de 4 a 2" 
src="03_archivos/ex03-01.gif" width=267 border=1></P>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact><SMALL><A name=2></A></SMALL><FONT 
      size=5>Arquitectura 1: Codificador binario de 4 a 2 bits sin 
      prioridad</FONT></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/03.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="03_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif" size=3>Aquí es donde vamos a crear el 
codificador, pero será (de momento) sin prioridad, es decir, nuestro codificador 
nos obliga a que sólo podemos tener seleccionado un sólo bit de entrada. Para 
detectar si hay más de un bit seleccionado usaremos el puerto 
<STRONG>error</STRONG> definido anteriormente. Si hay error, no nos importa el 
valor que tenga <STRONG>fuera</STRONG> ya que lo ignoraremos.</FONT></P>
<TABLE cellSpacing=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=top width=54 bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3><B>1</B><BR><B>2</B><BR><B>3</B><BR><B>4</B><BR><B>5</B><BR><B>6 
      </B><IMG height=11 
      alt='Si la entrada vale "0001" la salida es "00" (no se dice que pasa con la señal error)' 
      src="03_archivos/image02.gif" width=25><BR><B>7</B> <IMG height=11 
      alt='Si la entrada vale "0010" la salida es "01"' 
      src="03_archivos/image02.gif" width=25><BR><B>8</B> <IMG height=11 
      alt='Si la entrada vale "0100" la salida es "10"' 
      src="03_archivos/image02.gif" width=25><BR><B>9</B> <IMG height=11 
      alt='Si la entrada vale "1000" la salida es "11"' 
      src="03_archivos/image02.gif" width=25><BR><B>10</B><IMG height=11 
      alt="Si la entrada no es ninguno de los valores especificados, el error es '1', es decir, hay dos o mas salidas seleccionadas." 
      src="03_archivos/image02.gif" 
      width=25><BR><B>11</B><BR><B>12</B><BR><B>13</B></FONT></TD>
    <TD vAlign=top width=414 bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3><STRONG>architecture</STRONG> archicoder <STRONG>of</STRONG> coder 
      <STRONG>is</STRONG><BR><STRONG>begin</STRONG><BR><STRONG>process 
      (</STRONG>dentro<STRONG>)<BR>begin</STRONG><BR></FONT><FONT 
      face="OCR A Extended"><STRONG>case</STRONG> dentro 
      <STRONG>is</STRONG><BR>&nbsp;&nbsp;&nbsp; <STRONG>when</STRONG> "0001" 
      =&gt; fuera &lt;= "00";<BR>&nbsp;&nbsp;&nbsp; <STRONG>when</STRONG> "0010" 
      =&gt; fuera &lt;= "01";<BR>&nbsp;&nbsp;&nbsp; <STRONG>when</STRONG> "0100" 
      =&gt; fuera &lt;= "10";<BR>&nbsp;&nbsp;&nbsp; <STRONG>when</STRONG> "1000" 
      =&gt; fuera &lt;= "11";<BR>&nbsp;&nbsp;&nbsp; <STRONG>when</STRONG> 
      <STRONG>others</STRONG> =&gt; error &lt;= '1'; </FONT><BR><FONT 
      face="OCR A Extended" size=3><STRONG>&nbsp; end</STRONG> 
      <STRONG>case</STRONG>;<BR><STRONG>end</STRONG> 
      <STRONG>process</STRONG>;<STRONG><BR>end 
      </STRONG>archicoder<STRONG>;</STRONG></FONT></TD></TR></TBODY></TABLE>
<P align=left>&nbsp;</P>
<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="25%"></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm"><IMG height=28 
      alt="Qué debes saber antes de simular" src="03_archivos/image09.jpg" 
      width=211 lowsrc=image09.gif border=0></A></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/practica/coder01.vhd"><IMG 
      height=28 alt="Pulsa aquí para ver el código fuente" 
      src="03_archivos/image10.jpg" width=211 lowsrc=image10.gif 
border=0></A></TD>
    <TD width="25%"></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Pero debemos darnos cuenta de que este 
diseño es del todo incorrecto por la <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/04.htm#memoria">memoria 
implícita</A> que tiene el lenguaje VHDL, ya que en el momento en que haya un 
dos entradas seleccionas a la vez, la señal <STRONG>error</STRONG> permanecería 
para siempre a nivel lógico alto, ya que no hay ninguna instrucción que haga que 
esté a nivel lógico cero. Para corregir esto deberemos escribir el siguiente 
código, en el cual, cada vez que hay una entrada correcta la señal 
<STRONG>error</STRONG> se pone a cero.</FONT></P>
<TABLE cellSpacing=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=top width=72 bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3><B>1</B><BR><B>2</B><BR><B>3</B><BR><B>4</B><BR><B>5</B><BR><B>6 
      </B><IMG height=11 
      alt="Si la entrada vale &quot;0001&quot; la salida es &quot;00&quot; y la señal de error es '0'" 
      src="03_archivos/image02.gif" width=25><BR><B>7 </B><IMG height=11 
      alt="Si la entrada vale &quot;0010&quot; la salida es &quot;01&quot; y la señal de error es '0'" 
      src="03_archivos/image02.gif" width=25><BR><B>8</B> <IMG height=11 
      alt="Si la entrada vale &quot;0100&quot; la salida es &quot;10&quot; y la señal de error es '0'" 
      src="03_archivos/image02.gif" width=25><BR><B>9</B> <IMG height=11 
      alt="Si la entrada vale &quot;1000&quot; la salida es &quot;11&quot; y la señal de error es '0'" 
      src="03_archivos/image02.gif" width=25><BR><B>10</B><IMG height=11 
      alt="Si la entrada no es ninguno de los valores especificados, el error es '1', es decir, hay dos o mas salidas seleccionadas." 
      src="03_archivos/image02.gif" 
      width=25><BR><B>11</B><BR><B>12</B><BR><B>13</B></FONT></TD>
    <TD vAlign=top width=684 bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3><STRONG>architecture</STRONG> archicoder <STRONG>of</STRONG> coder 
      <STRONG>is</STRONG><BR><STRONG>begin</STRONG><BR><STRONG>process 
      (</STRONG>dentro<STRONG>)<BR>begin</STRONG><BR></FONT><FONT 
      face="OCR A Extended"><STRONG>case</STRONG> dentro 
      <STRONG>is</STRONG><BR>&nbsp;&nbsp;&nbsp; <STRONG>when</STRONG> "0001" 
      =&gt; fuera &lt;= "00"; error &lt;= '0'; <BR>&nbsp;&nbsp;&nbsp; 
      <STRONG>when</STRONG> "0010" =&gt; fuera &lt;= "01"; error &lt;= '0'; 
      <BR>&nbsp;&nbsp;&nbsp; <STRONG>when</STRONG> "0100" =&gt; fuera &lt;= 
      "10"; error &lt;= '0'; <BR>&nbsp;&nbsp;&nbsp; <STRONG>when</STRONG> "1000" 
      =&gt; fuera &lt;= "11"; error &lt;= '0'; <BR>&nbsp;&nbsp;&nbsp; 
      <STRONG>when</STRONG> <STRONG>others</STRONG> =&gt; error &lt;= '1'; 
      </FONT><BR><FONT face="OCR A Extended" size=3><STRONG>&nbsp; end</STRONG> 
      <STRONG>case</STRONG>;<BR><STRONG>end</STRONG> 
      <STRONG>process</STRONG>;<STRONG><BR>end 
      </STRONG>archicoder<STRONG>;</STRONG></FONT></TD></TR></TBODY></TABLE>
<P align=left>&nbsp;</P>
<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="25%"></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm"><IMG height=28 
      alt="Qué debes saber antes de simular" src="03_archivos/image09.jpg" 
      width=211 lowsrc=image09.gif border=0></A></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/practica/coder02.vhd"><IMG 
      height=28 alt="Pulsa aquí para ver el código fuente" 
      src="03_archivos/image10.jpg" width=211 lowsrc=image10.gif 
border=0></A></TD>
    <TD width="25%"></TD></TR></TBODY></TABLE>
<P>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact color=#000000><BIG><BIG><A 
      name=3></A>Entidad 2: Codificador binario de 8 a 3 con 
      prioridad</BIG></BIG></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/03.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="03_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">En esta ocasión, no necesitaremos la 
señal de error por ser un codificador con prioridad en el cual se especifica que 
hacer si hay mas de un bit habilitado. Le dotaremos además de una señal de 
salida de "enable output" o de codificador habilitado, que la llamaremos 
<STRONG>EO</STRONG>. Para conseguir un codificador deberemos cargar la función 
<STRONG>std_match</STRONG> que sirve para comparar dos vectores si en uno de 
ellos hay términos "poco importa". Esta función se encuentra en el paquete 
<STRONG>std_arith</STRONG>, que está en la librería <STRONG>ieee</STRONG>. Esta 
función, <STRONG>std_match</STRONG>, compara vectores del tipo 
<STRONG>std_logic</STRONG>, no bits, por lo que deberemos usar este nuevo tipo. 
El tipo <STRONG>std_logic</STRONG> es el tipo más usado ya que aparte de el '0' 
y el '1' del tipo <STRONG>bit</STRONG> nos ofrece el "poco importa", estado de 
alta impedancia,... Este será el tipo que usaremos a partir de ahora.</FONT></P>
<DIV align=center>
<CENTER>
<TABLE height=76 cellSpacing=1 width="50%" border=1>
  <TBODY>
  <TR>
    <TD vAlign=center align=middle width="33%" height=18><FONT 
      face="MS Sans Serif"><STRONG>dentro</STRONG></FONT></TD>
    <TD vAlign=center align=middle width="33%" height=18><FONT 
      face="MS Sans Serif"><STRONG>fuera</STRONG></FONT></TD>
    <TD vAlign=center align=middle width="34%" height=18><FONT 
      face="MS Sans Serif"><STRONG>EO</STRONG></FONT></TD></TR>
  <TR>
    <TD vAlign=center align=middle width="33%" height=20><FONT 
      face="OCR A Extended">HXXXXXXX<BR>LHXXXXXX<BR>LLHXXXXX<BR>LLLHXXXX<BR>LLLLHXXX<BR>LLLLLHXX<BR>LLLLLLHX<BR>LLLLLLLH</FONT></TD>
    <TD vAlign=center align=middle width="33%" height=20><FONT 
      face="OCR A Extended">HHH<BR>HHL<BR>HLH<BR>HLL<BR>LHH<BR>LHL<BR>LLH<BR>LLL</FONT></TD>
    <TD vAlign=center align=middle width="34%" height=20><FONT 
      face="OCR A Extended">L<BR>L<BR>L<BR>L<BR>L<BR>L<BR>L<BR>L</FONT></TD></TR>
  <TR>
    <TD vAlign=center align=middle width="33%" height=20><FONT 
      face="OCR A Extended">LLLLLLLL</FONT></TD>
    <TD vAlign=center align=middle width="33%" height=20><FONT 
      face="OCR A Extended">LLL</FONT></TD>
    <TD vAlign=center align=middle width="34%" height=20><FONT 
      face="OCR A Extended">H</FONT></TD></TR></TBODY></TABLE></CENTER></DIV>
<P>&nbsp;</P>
<TABLE cellSpacing=0 width="100%" bgColor=#ffcccc border=0>
  <TBODY>
  <TR>
    <TD vAlign=center width="59%" bgColor=#ffffff><FONT 
      face="OCR A Extended"><STRONG>library 
      ieee</STRONG>;<BR><STRONG>use</STRONG> 
      ieee.std_logic_1164.<STRONG>all</STRONG>;<BR><STRONG>use</STRONG> 
      <STRONG>work</STRONG>.std_arith.<STRONG>all</STRONG>;<B><BR>entity 
      </B>coder<B> is port(</B><BR>dentro: <STRONG>in&nbsp; std_logic_vector(7 
      downto 0);</STRONG><BR>fuera :<B> </B><STRONG>out 
      std_logic_vec</STRONG><B>tor(2 downto 0);<BR></B>eo&nbsp;&nbsp;&nbsp; : 
      <STRONG>out bit</STRONG><B><BR></B><STRONG>);<BR>end</STRONG> 
    coder;</FONT></TD>
    <TD vAlign=center width="41%" bgColor=#ffffff><FONT 
      face="MS Sans Serif">La primera línea llama a la librería 
      <STRONG>ieee</STRONG>, la cual contiene el paquete 
      <STRONG>std_logic_1164</STRONG>, que lo necesitamos para usar el tipo 
      <STRONG>std_logic_vector</STRONG>, y dentro de este paquete está 
      <STRONG>std_arith</STRONG>, que nos proporciona la función 
      <STRONG>std_match</STRONG>. Se usan los tipos bits y 
      <STRONG>std_logic</STRONG>.</FONT></TD></TR></TBODY></TABLE>
<P>&nbsp;</P>
<P>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact color=#000000><BIG><BIG><A 
      name=4></A>Arquitectura 2: Codificador binario de 8 a 3 con 
      prioridad</BIG></BIG></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/03.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="03_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">En este caso, pueden estar dos bits de 
entrada a nivel alto a la vez, pero sólo se le hace caso al que hemos 
determinado que sea el de más peso. En este caso el bit de más peso es dentro(7) 
y el de menos peso es dentro(0). La librería que hemos cargado nos permite hacer 
comparaciones de elementos de los denominados "poco importa" con la función 
<STRONG>std_match</STRONG>. Para operar con <STRONG>std_match</STRONG> 
introducimos dos vectores (de igual longitud) y nos devuelve le valor 
<STRONG>true</STRONG> o <STRONG>false</STRONG> según sea el resultado de la 
comparación. <A href="http://det.bp.ehu.es/vhdl/pagina/completo/04.htm#4">Pulsa 
aquí para ver la sentencia if.</A></FONT></P>
<TABLE cellSpacing=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=top width=54 bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3><B>1</B><BR><B>2</B><BR><B>3</B><BR><B>4</B><BR><B>5 </B><IMG 
      height=11 
      alt="Si el primer bit de &quot;dentro&quot; es '1',  entonces fuera es 111, sin importar el resto de los bits de &quot;dentro.&quot;." 
      src="03_archivos/image02.gif" width=25><BR><B>6 </B><IMG height=11 
      alt="Si el primer bit de &quot;dentro&quot; es '0' y el segundo es '1',  entonces fuera es 110, sin importar el resto de los bits de &quot;dentro.&quot;." 
      src="03_archivos/image02.gif" width=25><BR><B>7 </B><IMG height=11 
      alt="Si el los dos primeros bits de &quot;dentro&quot; son '0' y el tercero es '1',  entonces fuera es 101, sin importar el resto de los bits de &quot;dentro.&quot;." 
      src="03_archivos/image02.gif" width=25><BR><B>8</B> <IMG height=11 
      alt="Si el los tres primeros bits de &quot;dentro&quot; son '0' y el cuarto es '1',  entonces fuera es 100, sin importar el resto de los bits de &quot;dentro.&quot;." 
      src="03_archivos/image02.gif" width=25><BR><B>9</B> <IMG height=11 
      alt="Si el los cuatro primeros bits de &quot;dentro&quot; son '0' y el quinto es '1',  entonces fuera es 011, sin importar el resto de los bits de &quot;dentro.&quot;." 
      src="03_archivos/image02.gif" width=25><BR><B>10</B><IMG height=11 
      alt="Si el los cinco primeros bits de &quot;dentro&quot; son '0' y el sexto es '1',  entonces fuera es 010, sin importar el resto de los bits de &quot;dentro.&quot;" 
      src="03_archivos/image02.gif" width=25><BR><B>11</B><IMG height=11 
      alt="Si el los seis primeros bits de &quot;dentro&quot; son '0' y el séptimo es '1',  entonces fuera es 001, sin importar el último de los bits de &quot;dentro.&quot;" 
      src="03_archivos/image02.gif" width=25><BR><B>12</B><IMG height=11 
      alt="Si el los siete primeros bits de &quot;dentro&quot; son '0' y el octavo es '1',  entonces fuera es 000, sin importar el último de los bits de &quot;dentro.&quot;" 
      src="03_archivos/image02.gif" 
      width=25><BR><B>13</B></FONT><BR><STRONG><FONT 
      face="OCR A Extended">14<BR>15</FONT></STRONG></TD>
    <TD vAlign=top width=702 bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3><STRONG>architecture</STRONG> archicoder <STRONG>of</STRONG> coder 
      <STRONG>is</STRONG><BR><STRONG>begin</STRONG><BR><STRONG>process 
      (</STRONG>dentro<STRONG>)<BR>begin</STRONG><BR><STRONG>if</STRONG> 
      <STRONG>std_match</STRONG>(dentro,"1-------") <STRONG>then</STRONG> 
      fuera&lt;="111"; eo&lt;='0';<STRONG> end</STRONG> 
      <STRONG>if</STRONG>;<BR><STRONG>if</STRONG> 
      <STRONG>std_match</STRONG>(dentro,"01------") <STRONG>then</STRONG> 
      fuera&lt;="110"; eo&lt;='0';<STRONG> end</STRONG> 
      <STRONG>if</STRONG>;<BR><STRONG>if</STRONG> 
      <STRONG>std_match</STRONG>(dentro,"001-----") <STRONG>then</STRONG> 
      fuera&lt;="101"; eo&lt;='0';<STRONG> end</STRONG> 
      <STRONG>if</STRONG>;<BR><STRONG>if</STRONG> 
      <STRONG>std_match</STRONG>(dentro,"0001----") <STRONG>then</STRONG> 
      fuera&lt;="100"; eo&lt;='0';<STRONG> end</STRONG> 
      <STRONG>if</STRONG>;<BR><STRONG>if</STRONG> 
      <STRONG>std_match</STRONG>(dentro,"00001---") <STRONG>then</STRONG> 
      fuera&lt;="011"; eo&lt;='0';<STRONG> end</STRONG> 
      <STRONG>if</STRONG>;<BR><STRONG>if</STRONG> 
      <STRONG>std_match</STRONG>(dentro,"000001--") <STRONG>then</STRONG> 
      fuera&lt;="010"; eo&lt;='0';<STRONG> end</STRONG> 
      <STRONG>if</STRONG>;<BR><STRONG>if</STRONG> 
      <STRONG>std_match</STRONG>(dentro,"0000001-") <STRONG>then</STRONG> 
      fuera&lt;="001"; eo&lt;='0';<STRONG> end</STRONG> 
      <STRONG>if</STRONG>;<BR><STRONG>if</STRONG> 
      <STRONG>std_match</STRONG>(dentro,"00000001") <STRONG>then</STRONG> 
      fuera&lt;="000"; eo&lt;='0';<STRONG> end</STRONG> 
      <STRONG>if</STRONG>;<BR><STRONG>if</STRONG> 
      <STRONG>std_match</STRONG>(dentro,"00000000") <STRONG>then</STRONG> 
      fuera&lt;="000"; eo&lt;='1';<STRONG> end</STRONG> 
      <STRONG>if</STRONG>;<BR><STRONG>end</STRONG> 
      <STRONG>process</STRONG>;<BR><STRONG>end 
      </STRONG>coder<STRONG>;</STRONG></FONT></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Hacer este ejercicio con el <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/02.htm#5">estilo de flujo de 
datos</A> hubiera sido impensable, ya que habría que buscar las ecuaciones 
lógicas para cada bit de la salida, lo cual hubiera sido, aparte de complicado, 
superfluo, ya que VHDL se creó para evitar el hacer esto precisamente. Como 
ejemplo de ésto, a continuación se muestran la ecuación lógica para conseguir el 
bit <STRONG>fuera(0)</STRONG>:</FONT></P>
<TABLE cellSpacing=0 width="100%" bgColor=#ffcccc border=0>
  <TBODY>
  <TR>
    <TD vAlign=center width="59%" bgColor=#ffffff><FONT 
      face="OCR A Extended">&nbsp;&nbsp;&nbsp; A0 &lt;=((<STRONG>not</STRONG> 
      dentro(1)) <STRONG>and</STRONG> dentro(2) <STRONG>and</STRONG> dentro(4) 
      <STRONG>and</STRONG> dentro(6)) 
      <STRONG>OR</STRONG><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      ((<STRONG>not</STRONG> dentro(3)) <STRONG>and</STRONG> dentro(4) 
      <STRONG>and</STRONG> dentro(6)) 
      <STRONG>OR</STRONG><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      ((<STRONG>not</STRONG> dentro(5)) <STRONG>and</STRONG> dentro(6) 
      <STRONG>and</STRONG>) 
      <STRONG>OR</STRONG><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      ((<STRONG>not</STRONG> dentro(7)));<BR></FONT></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Se comprueba claramente que este modo 
es, aparte de complicado, poco legible para una persona que trate de analizar el 
código.</FONT></P>
<P align=left>&nbsp;</P>
<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="25%"></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm"><IMG height=28 
      alt="Qué debes saber antes de simular" src="03_archivos/image09.jpg" 
      width=211 lowsrc=image09.gif border=0></A></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/practica/coder03.vhd"><IMG 
      height=28 alt="Pulsa aquí para ver el código fuente" 
      src="03_archivos/image10.jpg" width=211 lowsrc=image10.gif 
border=0></A></TD>
    <TD width="25%"></TD></TR></TBODY></TABLE>
<P align=left>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact><FONT color=#000000><BIG><BIG><A 
      name=5></A>Entidad 3:</BIG></BIG></FONT><FONT size=5><STRONG> 
      </STRONG>Codificador binario 16 a 4 con 
      </FONT><BIG><BIG>interrupción</BIG></BIG></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/03.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="03_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Este ejemplo lo emplearemos para poder 
dar muestra de la versatilidad de VHDL para el diseño e implementación de 
circuitos, que por sus características peculiares no existen en el mercado, por 
lo que en condiciones normales nos veríamos obligados a diseñarlos e 
implementarlos haciendo uso de varios circuitos MSI que aumentarían la 
complejidad del "routeado" y aumentaría la posibilidad de tener fenómenos 
aleatorios debido a la cantidad de conexiones.</FONT></P>
<P align=left><FONT face="MS Sans Serif">Para este codificador las 
especificaciones son las siguientes: una entrada de dieciseis bits sin 
prioridad, activadas por cero, una salida de cuatro bits activadas por uno (que 
corresponderían con tecnología CMOS) &nbsp; y una salida de interrupción que 
tomará el valor uno cuando <U>una sola</U> de las entradas esté activada. En las 
especificaciones, se nos dice que aparte de tener una &nbsp; operatividad 
especial y única el circuito también requerirá una disposición determinada de 
sus pines de entrada y de salida de forma que seremos nosotros los que deberemos 
especificarle al compilador donde y como queremeos que esten posicionados. El 
diseño del dispositivo lógico debe ser el siguiente:</FONT></P>
<P align=center><IMG height=174 alt="Esquema del codificador empleado" 
src="03_archivos/ex03-02.gif" width=168 border=1></P>
<P align=left><FONT face="MS Sans Serif">De esta forma la entidad nos queda como 
sigue:</FONT></P>
<TABLE cellSpacing=0 width="100%" bgColor=#ffffff border=0>
  <TBODY>
  <TR>
    <TD width="60%"><FONT face="OCR A Extended"><STRONG>library</STRONG> 
      <STRONG>ieee</STRONG>;<BR><STRONG>use</STRONG> 
      <STRONG>ieee</STRONG>.std_logic_1164.<STRONG>all</STRONG>;<BR><STRONG>entity</STRONG> 
      coder <STRONG>is</STRONG><BR><STRONG>port</STRONG>(<BR>ent: 
      <STRONG>in</STRONG>&nbsp; <STRONG>std_logic_vector</STRONG>(16 
      <STRONG>downto</STRONG> 1);<BR>interr: <STRONG>out</STRONG> 
      <STRONG>std_logic</STRONG>; <BR>sal: <STRONG>out</STRONG> 
      <STRONG>std_logic_vector</STRONG>(4 <STRONG>downto</STRONG> 
      1)<BR><STRONG>)</STRONG>;<BR><STRONG><BR>attribute 
      </STRONG>pin_numbers<STRONG> of</STRONG> coder:<STRONG>entity 
      is<BR></STRONG>"ent(1):3&nbsp; ent(2):2&nbsp;&nbsp; ent(3):20 
      ent(4):19<BR>ent(5):1&nbsp; ent(6):23&nbsp; ent(7):22 
      ent(8):21<BR>ent(9):10 ent(10):11 ent(11):4 ent(12):5<BR>ent(13):8 
      ent(14):9&nbsp; ent(15):6 ent(16):7 
      "<BR><STRONG>&amp;<BR></STRONG>"sal(1):14 sal(2):15 sal(3):16 
      sal(4):17&nbsp;&nbsp; inerr:18 ";<BR><STRONG><BR>end</STRONG> 
    coder;</FONT></TD>
    <TD width="40%"><FONT face="MS Sans Serif">Al igual que antes, para usar 
      el tipo <STRONG>std_logic</STRONG> o alguno de sus derivados (como los 
      vectores), debemos cargar la librería <STRONG>ieee</STRONG>, y, de ésta, 
      el paquete <STRONG>std_logic_1164</STRONG>. La palabra 
      <STRONG>all</STRONG> indica que cargamos TODO el paquete, no una parte. 
      <BR>Para prefijar la dispocicion de las señales en las patillas de la 
      cápsula, hemos usado la sentencia <STRONG>attribute</STRONG> pin_numbers, 
      en la cual primero se especifica el orden de las entradas y despues el de 
      las salidas.</FONT></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Como nota curiosa hay que señalar que 
el compilador que usamos, el Galaxy / Warp de Cypress no admite que las líneas 
de la posición de los pines tengan varias línea, sino sólamente una para las 
entradas y sólamente una para las salidas. Además entre la última asignación y 
las comillas debe existir un espacio.</FONT></P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact><FONT color=#000000><BIG><BIG><A 
      name=6></A>Arquitectura 3:</BIG></BIG></FONT><FONT size=5> Codificador 
      binario 16 a 4 con </FONT><BIG><BIG>interrupción</BIG></BIG></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/03.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="03_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Para crear la arquitectura de este 
codificador deberemos conocer con precisión cuales han de ser sus requerimientos 
de funcionamiento. </FONT></P>
<TABLE cellSpacing=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=top width=54 bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3><B>1</B><BR><B>2</B><BR><B>3</B><BR><B>4</B><BR><B>5</B> <IMG 
      height=11 
      alt="Según el valor de &quot;ent&quot;, asignamos a la salida &quot;sal&quot; un valor u otro. Si el uso es normal, la interupción vale '1'." 
      src="03_archivos/image02.gif" 
      width=25><BR><B>6</B><BR><B>7</B><BR><B>8</B><BR><B>9</B><BR><B>10</B><BR><B>11</B><BR><B>12</B><BR><B>13<BR>14<BR>15<BR>16<BR>17<BR>18<BR>19<BR>20<BR>21<BR>22</B><IMG 
      height=11 
      alt="Si la entrada no está especificada en los casos anteriores, el uso no es el adecuado y la interrupción adopta el valor cero." 
      src="03_archivos/image02.gif" width=25><B><BR>23<BR>24<BR>25</B></FONT></TD>
    <TD vAlign=top width=702 bgColor=#ffffff><FONT 
      face="OCR A Extended"><STRONG>architecture</STRONG> archicodifi 
      <STRONG>of</STRONG> coder 
      <STRONG>is</STRONG><BR><STRONG>begin</STRONG><BR>code: 
      <STRONG>process</STRONG> 
      (ent)<BR><STRONG>begin</STRONG><BR><STRONG>case</STRONG> ent is<BR>&nbsp; 
      <STRONG>when</STRONG> "1111111111111110" =&gt; sal &lt;= "0000"; 
      interr&lt;='1';<BR>&nbsp; <STRONG>when</STRONG> "1111111111111101" =&gt; 
      sal &lt;= "0001"; interr&lt;='1';<BR>&nbsp; <STRONG>when</STRONG> 
      "1111111111111011" =&gt; sal &lt;= "0010"; interr&lt;='1';<BR>&nbsp; 
      <STRONG>when</STRONG> "1111111111110111" =&gt; sal &lt;= "0011"; 
      interr&lt;='1';<BR>&nbsp; <STRONG>when</STRONG> "1111111111101111" =&gt; 
      sal &lt;= "0100"; interr&lt;='1';<BR>&nbsp; <STRONG>when</STRONG> 
      "1111111111011111" =&gt; sal &lt;= "0101"; interr&lt;='1';<BR>&nbsp; 
      <STRONG>when</STRONG> "1111111110111111" =&gt; sal &lt;= "0110"; 
      interr&lt;='1';<BR>&nbsp; <STRONG>when</STRONG> "1111111101111111" =&gt; 
      sal &lt;= "0111"; interr&lt;='1';<BR>&nbsp; <STRONG>when</STRONG> 
      "1111111011111111" =&gt; sal &lt;= "1000"; interr&lt;='1';<BR>&nbsp; 
      <STRONG>when</STRONG> "1111110111111111" =&gt; sal &lt;= "1001"; 
      interr&lt;='1';<BR>&nbsp; <STRONG>when</STRONG> "1111101111111111" =&gt; 
      sal &lt;= "1010"; interr&lt;='1';<BR>&nbsp; <STRONG>when</STRONG> 
      "1111011111111111" =&gt; sal &lt;= "1011"; interr&lt;='1';<BR>&nbsp; 
      <STRONG>when</STRONG> "1110111111111111" =&gt; sal &lt;= "1100"; 
      interr&lt;='1';<BR>&nbsp; <STRONG>when</STRONG> "1101111111111111" =&gt; 
      sal &lt;= "1101"; interr&lt;='1';<BR>&nbsp; <STRONG>when</STRONG> 
      "1011111111111111" =&gt; sal &lt;= "1110"; interr&lt;='1';<BR>&nbsp; 
      <STRONG>when</STRONG> "0111111111111111" =&gt; sal &lt;= "1111"; 
      interr&lt;='1';<BR>&nbsp; <STRONG>when</STRONG> <STRONG>others</STRONG> 
      =&gt; sal &lt;= "1111"; interr&lt;='0';<BR><STRONG>end</STRONG> 
      <STRONG>case</STRONG>;<BR><STRONG>end</STRONG> <STRONG>process</STRONG> 
      code;<BR><STRONG>end</STRONG> archicodifi;</FONT></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Este ejemplo no tiene nada de extraño a 
estas alturas del tutorial, ya que la sentencia <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/04.htm#5"><STRONG>case</STRONG></A> 
ha aparecido en muchas ocasiones. Lo único es que hemos puesto un nombre al 
proceso (<STRONG>code</STRONG>). Esto es útil para cuando tenemos varios de 
ellos en el mismo programa y queremos estructurar la programación para hacerla 
más legible. Al cerrar un proceso con nombre, hay que especificarlo, como 
aparece en la línea 24.</FONT></P>
<P align=left>&nbsp;</P>
<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="25%"></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm"><IMG height=28 
      alt="Qué debes saber antes de simular" src="03_archivos/image09.jpg" 
      width=211 lowsrc=image09.gif border=0></A></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/practica/coder04.vhd"><IMG 
      height=28 alt="Pulsa aquí para ver el código fuente" 
      src="03_archivos/image10.jpg" width=211 lowsrc=image10.gif 
border=0></A></TD>
    <TD width="25%"></TD></TR></TBODY></TABLE>
<P align=center><IMG height=10 alt="Separa01.gif (636 bytes)" 
src="03_archivos/separa01.gif" width=708></P>
<DL>
  <DD> </DD></DL></BODY></HTML>
