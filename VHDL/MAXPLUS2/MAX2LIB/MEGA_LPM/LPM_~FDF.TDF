--------------------------------------------------------------------
--
--	LPM_LATCH Parameterized Megafunction
--
--	Copyright (C) 1991-1997 Altera Corporation
--	Any megafunction design, and related net list (encrypted or decrypted),
--	support information, device programming or simulation file, and any other
--	associated documentation or information provided by Altera or a partner
--	under Altera's Megafunction Partnership Program may be used only to
--	program PLD devices (but not masked PLD devices) from Altera.  Any other
--	use of such megafunction design, net list, support information, device
--	programming or simulation file, or any other related documentation or
--	information is prohibited for any other purpose, including, but not
--	limited to modification, reverse engineering, de-compiling, or use with
--	any other silicon devices, unless such use is explicitly licensed under
--	a separate agreement with Altera or a megafunction partner.  Title to
--	the intellectual property, including patents, copyrights, trademarks,
--	trade secrets, or maskworks, embodied in any such megafunction design,
--	net list, support information, device programming or simulation file, or
--	any other related documentation or information provided by Altera or a
--	megafunction partner, remains with Altera, the megafunction partner, or
--	their respective licensors.  No other licenses, including any licenses
--	needed under any third party's intellectual property, are provided herein.
--
--	Version 1.0
--
--------------------------------------------------------------------

INCLUDE "lpm_constant.inc";

PARAMETERS
(
	LPM_WIDTH,
	LPM_AVALUE = 0
);

DEFINE ASYNC_USED() = USED(aconst) # USED(aclr) # USED(aset);

SUBDESIGN lpm_latch
(
	data[LPM_WIDTH-1..0]		: INPUT = GND;
	gate						: INPUT;
	aclr						: INPUT = GND;
	aset						: INPUT = GND;
	aconst						: INPUT = GND;
	q[LPM_WIDTH-1..0]			: OUTPUT;
)

VARIABLE
	IF (ASYNC_USED()) GENERATE
		dffs[LPM_WIDTH-1..0]		: DFF;		-- need clear and/or preset
		IF (USED(LPM_AVALUE)) GENERATE
			const	: lpm_constant WITH (LPM_WIDTH=LPM_WIDTH, LPM_CVALUE=LPM_AVALUE);
		END GENERATE;
	ELSE GENERATE
		latches[LPM_WIDTH-1..0]		: LATCH;	-- gate input
	END GENERATE;

BEGIN

	ASSERT (LPM_WIDTH > 0)
			REPORT "Value of LPM_WIDTH parameter must be greater than 0"
			SEVERITY ERROR
			HELP_ID LPM_LATCH_WIDTH;

	ASSERT (USED(aconst) == 0 # USED(LPM_AVALUE))
			REPORT "Value of LPM_AVALUE parameter must be assigned if aconst port is used"
			SEVERITY ERROR
			HELP_ID LPM_LATCH_ACONST;

	ASSERT (USED(aconst) == 0 # LPM_AVALUE < 2^LPM_WIDTH)
			REPORT "Value of LPM_AVALUE parameter must be less than 2^LPM_WIDTH if aconst port is used -- using % instead"
				LPM_AVALUE mod 2^LPM_WIDTH
			SEVERITY WARNING
			HELP_ID LPM_LATCH_ACONST_BIG;

	ASSERT (USED(aconst) # USED(aset) # USED(LPM_AVALUE) == 0)
			REPORT "Ignored LPM_AVALUE parameter because neither the aconst or aset port is used"
			SEVERITY WARNING
			HELP_ID LPM_LATCH_AVALUE;

	ASSERT (USED(aconst) == 0 # (USED(aclr) == 0 & USED(aset) == 0))
			REPORT "Can't use aconst port if aclr or aset port is used"
			SEVERITY ERROR
			HELP_ID LPM_LATCH_ACONFLICT;

	IF (ASYNC_USED()) GENERATE
		IF (USED(aconst)) GENERATE
			dffs[].clrn = (!aconst # const.result[])
						& (aconst # !gate # data[]);
			dffs[].prn  = (!aconst # !const.result[])
						& (aconst # !gate # !data[]);
		ELSE GENERATE
			IF (USED(LPM_AVALUE)) GENERATE
				dffs[].clrn = !aclr
							& (!aset # const.result[])
							& (aset # !gate # data[]);
				dffs[].prn  = aclr
							# (!aset # !const.result[])
							  & (aset # !gate # !data[]);
			ELSE GENERATE
				dffs[].clrn = !aclr & (aset # !gate # data[]);
				dffs[].prn = aclr # !aset & (!gate # !data[]);
			END GENERATE;
		END GENERATE;
		dffs[].d = VCC;
		dffs[].clk = VCC;

		% Connect outputs %
		q[] = dffs[].q;
	ELSE GENERATE
		% real latches %
		latches[].d = data[];
		latches[].ena = gate;

		% Connect outputs %
		q[] = latches[].q;
	END GENERATE;

END;
