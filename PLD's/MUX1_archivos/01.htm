<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0047)http://det.bp.ehu.es/vhdl/pagina/express/01.htm -->
<HTML><HEAD><TITLE>Práctica 1: Multiplexor</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META content="Daniel Jiménez Iglesias          danieljimenez@mailcity.com" 
name=Author>
<META content="Daniel Jiménez Iglesias y Juan Carlos Cárdenas Bonelli" 
name=Author>
<META content="Juan Carlos Cárdenas Bonelli     juanky.cardenas@mailcity.com" 
name=Author>
<META content="MSHTML 5.50.4134.100" name=GENERATOR></HEAD>
<BODY vLink=#800080 link=#0000ff bgProperties=fixed 
background=01_archivos/fondo00.jpg>
<SCRIPT language=JavaScript><!--
MSFPhover = 
  (((navigator.appName == "Netscape") && 
  (parseInt(navigator.appVersion) >= 3 )) || 
  ((navigator.appName == "Microsoft Internet Explorer") && 
  (parseInt(navigator.appVersion) >= 4 ))); 
function MSFPpreload(img) 
{
  var a=new Image(); a.src=img; return a; 
}
// -->

</SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav1n=MSFPpreload('boto10.jpg'); 
MSFPnav1h=MSFPpreload('boto11.jpg'); }
// --></SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav2n=MSFPpreload('boto20.jpg'); 
MSFPnav2h=MSFPpreload('boto21.jpg'); }
// --></SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav3n=MSFPpreload('boto30.jpg'); 
MSFPnav3h=MSFPpreload('boto31.jpg'); }
// --></SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav4n=MSFPpreload('boto40.jpg'); 
MSFPnav4h=MSFPpreload('boto41.jpg'); }
// --></SCRIPT>

<TABLE cellPadding=2 width="76%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center align=left width="100%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/conoci.htm"><IMG height=51 
      alt="Conocimientos básicos" src="01_archivos/image07.jpg" width=72 
      lowsrc=image07.gif border=0></A><A name=top></A><SMALL><IMG height=54 
      alt="Práctica 1: Multiplexor" src="01_archivos/EX01-00.jpg" width=447 
      lowsrc=images/ex01-00.gif></SMALL><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/02.htm"><IMG height=52 
      alt=Demultiplexor src="01_archivos/image08.jpg" width=74 
      border=0></A><BR>&nbsp; </TD></TR>
  <TR>
    <TD vAlign=center align=left width="100%"><FONT face=Verdana size=2>Un 
      multiplexor es un dispositivo lógico que recibe información por sus dos o 
      más entradas (de uno o mas bits de ancho) y mediante una señal de control 
      decidimos cual de la entradas aparece reflejada en la salida; esto es, un 
      convertidor de paralelo a serie. Si tienen una señal de "enable" esta hace 
      que el multiplexor esté habilitado o no</FONT></TD></TR>
  <TR>
    <TD vAlign=center align=middle width="100%">
      <P align=left><SMALL><FONT face=Verdana>Los multiplexores disponibles 
      tienen todos señal de enable menos el primero. Las arquitecturas están 
      realizadas solo para algunas entidades</FONT></SMALL></P>
      <P align=left><SMALL><FONT face=Verdana>Elige en la lista una práctica 
      para empezar, sin más que pinchar en el botón adecuado. Para volver pulsa 
      el botón que está al lado del título</FONT></SMALL></P><SMALL><FONT 
      face=Verdana>
      <P align=left></FONT></SMALL>&nbsp;</P></TD></TR>
  <TR>
    <TD align=middle width="100%">
      <DIV align=left>
      <TABLE style="FLOAT: left" height=245 cellSpacing=4 cellPadding=2 
      width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=center width="28%" height=35>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/01.htm#1"><IMG 
            height=29 alt="Entidad 1" src="01_archivos/enti1.jpg" width=200 
            border=0></A></P></TD>
          <TD vAlign=center width="72%" height=35><FONT face=Arial 
            size=3><STRONG>Multiplexor de un bit y dos canales sin 
            "enable"</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=35>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/01.htm#2"><IMG 
            height=29 alt="Entidad 2" src="01_archivos/enti2.jpg" width=200 
            border=0></A></P></TD>
          <TD vAlign=center width="72%" height=35><FONT face=Arial 
            size=3><STRONG>Cómo añadir una señal de 
        "enable"</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=35>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/01.htm#3"><IMG 
            height=29 alt="Entidad 3" src="01_archivos/enti3.jpg" width=200 
            border=0></A></P></TD>
          <TD vAlign=center width="72%" height=35><FONT face=Arial 
            size=3><STRONG>Como aumentar los bits de cada 
          canal</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=35>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/01.htm#4"><IMG 
            height=29 alt="Entidad 4" src="01_archivos/enti4.jpg" width=200 
            border=0></A></P></TD>
          <TD vAlign=center width="72%" height=35><FONT face=Arial 
            size=3><STRONG>Cómo aumentar el número de 
        canales</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=35>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/01.htm#5"><IMG 
            height=29 alt="Arquitectura 1" src="01_archivos/arqui1.jpg" 
            width=200 border=0></A></P></TD>
          <TD vAlign=center width="72%" height=35><FONT face=Arial 
            size=3><STRONG>Completar la entidad 4 con estilo algorítmico o de 
            comportamiento</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=35>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/01.htm#6"><IMG 
            height=29 alt="Arquitectura 2" src="01_archivos/arqui2.jpg" 
            width=200 border=0></A></P></TD>
          <TD vAlign=center width="72%" height=35><FONT face=Arial 
            size=3><STRONG>Completar la entidad 2 con estilo flujo de 
            datos</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=35>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/01.htm#7"><IMG 
            height=29 alt="Arquitectura 3" src="01_archivos/arqui3.jpg" 
            width=200 border=0></A></P></TD>
          <TD vAlign=center width="72%" height=35><FONT face=Arial 
            size=3><STRONG>Completar la entidad 2 con estilo 
            estructural</STRONG></FONT></TD></TR></TBODY></TABLE></DIV>
      <P>&nbsp;</P></TD></TR>
  <TR>
    <TD align=middle width="100%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm#01"><IMG 
      height=27 alt="Pulsa aquí para simular los ejemplos construidos." 
      src="01_archivos/image03.jpg" width=612 lowsrc=image03.gif 
  border=0></A></TD></TR></TBODY></TABLE>
<P align=center>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="91%" border=0>
  <TBODY>
  <TR>
    <TD width="76%"><FONT face=Impact><FONT color=#000000><BIG><BIG><A 
      name=1></A>Entidad 1:&nbsp;</BIG></BIG></FONT><FONT size=5>Multiplexor de 
      un bit y dos canales sin "enable"</FONT></FONT></TD>
    <TD width="16%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/01.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="01_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif" size=3>Este primer ejemplo es el más 
sencillo de todos ya que no se puede concebir un multiplexor con menos 
operatividad. Usaremos el <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/02.htm#3">tipo bit</A>, que 
viene predefinido por VHDL, y sirve para indicar que la señal o variable 
asociada es de un sólo bit. La nomenclatura usada para designar a los puertos se 
mantendrá hasta el final de la práctica, no así como el nombre de la entidad, 
que lo cambiaremos.</FONT></P>
<TABLE cellSpacing=0 width="100%" bgColor=#ffcccc border=0>
  <TBODY>
  <TR>
    <TD vAlign=center width="50%" bgColor=#ffffff><FONT 
      face="OCR A Extended"><B>entity </B>multiplexor<B> is 
      port(</B><BR>a,b&nbsp;&nbsp;&nbsp;&nbsp; : <B>in</B>&nbsp; 
      <B>bit</B>;&nbsp;&nbsp; <BR>control : <B>in</B>&nbsp; 
      <B>bit</B>;&nbsp;&nbsp; <BR>c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 
      <B>out</B> <B>bit<BR></B><STRONG>);<BR>end</STRONG> multiplexor;</FONT></TD>
    <TD vAlign=center width="50%" bgColor=#ffffff><FONT 
      face="MS Sans Serif">En este caso, las entradas son <B>a</B> y <B>b</B> 
      (por eso son del <A 
      href="http://det.bp.ehu.es/vhdl/pagina/completo/02.htm#2">modo 
      <STRONG>in</STRONG></A>), la señal de control es <B>control</B> (también 
      del modo <STRONG>in</STRONG>), y la salida es <B>c</B> (del <A 
      href="http://det.bp.ehu.es/vhdl/pagina/completo/02.htm#2">modo 
      <STRONG>ou</A>t</STRONG>). Todas son de un bit de 
  ancho.</FONT></TD></TR></TBODY></TABLE>
<P align=center><FONT face=Verdana><IMG height=172 src="01_archivos/ex01-03.gif" 
width=224 vspace=10 border=1> &nbsp; </FONT></P>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact><SMALL><A name=2></A></SMALL><FONT 
      size=5>Entidad 2: Qué hacer para que tenga señal de 
    "enable"</FONT></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/01.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="01_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif" size=3>Para que nuestro diseño tenga 
una señal de enable, y a efectos de la entidad, solamente debemos incluirla sin 
más. Más adelante, en la <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/02.htm#4">arquitectura</A> será 
donde deberemos manejar esta señal para que realice lo que nosotros 
queramos.</FONT></P>
<TABLE cellSpacing=0 width="100%" bgColor=#ffffcc border=0>
  <TBODY>
  <TR>
    <TD vAlign=center width="50%" bgColor=#ffffff><FONT 
      face="OCR A Extended"><B>entity </B>multiplexor<B> is 
      port(</B><BR>a,b&nbsp;&nbsp;&nbsp;&nbsp; : <B>in&nbsp; bit</B>;<BR>control 
      : <B>in&nbsp; bit</B>;<BR>enable&nbsp; : <B>in&nbsp; 
      bit</B>;<BR>c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <B>out</B> 
      <B>bit</B><BR><B>);</B><BR><STRONG>end</STRONG> multiplexor;</FONT></TD>
    <TD vAlign=center width="50%" bgColor=#ffffff><FONT 
      face="MS Sans Serif">En este caso, las entradas son <B>a</B> y <B>b</B>, 
      la señal de control es <B>control</B>, la señal de enable es 
      <B>enable</B>, y la salida es <B>c</B>. Todas vuelven a ser de un bit de 
      ancho.</FONT></TD></TR></TBODY></TABLE>
<P align=center><FONT face=Verdana><IMG height=184 src="01_archivos/ex01-04.gif" 
width=224 vspace=10 border=1> &nbsp; </FONT></P>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact><SMALL><A name=3></A></SMALL><FONT 
      size=5>Entidad 3: Qué hacer para que cada canal sea de mas 
      bits</FONT></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/01.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="01_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif" size=3>Si queremos que cada entrada (y 
la salida, por supuesto), tengan más anchura, es decir, más bits, no nos sirve 
el tipo bit, ya que su anchura es de un bit. Para ello deberemos usar vectores 
de bits, que al igual que bit está predefinida en VHDL. En este ejemplo usaremos 
entradas de 4 bits, que para definirlos hay que escribir el número de mayor peso 
seguido de la palabra <STRONG>downto</STRONG> y del número de menor 
peso.</FONT></P>
<TABLE cellSpacing=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center width="50%" bgColor=#ffffff><FONT 
      face="OCR A Extended"><B>entity </B>multiplexor<B> is 
      port(</B><BR>a,b:<B>in</B> <B>bit_vector(3 downto 
      0)</B>;<BR>control:<B>in</B> <B>bit</B>;<BR>enable :<B>in</B> 
      <B>bit</B>;<BR>c: <B>out</B> <B>bit_vector(3 downto 
      0)</B><BR><B>);<BR></B><STRONG>end</STRONG> multiplexor;</FONT></TD>
    <TD vAlign=center width="50%" bgColor=#ffffff><FONT 
      face="MS Sans Serif">En este caso, las entradas son <B>a</B> y <B>b</B>, 
      la señal de control es <B>control</B>, la señal de habilitación es 
      <B>enable</B>, y la salida es <B>c</B>. Ahora, las entradas <B>a</B> y 
      <B>b</B> son de 4 bits de ancho, pero como sólo son dos, <B>control</B> 
      debe seguir siendo de un solo bit. La salida debe aumentar también para 
      adaptarse a las entradas.</FONT></TD></TR></TBODY></TABLE>
<P align=center><FONT face=Verdana><IMG height=184 src="01_archivos/ex01-05.gif" 
width=224 vspace=10 border=1> &nbsp; </FONT></P>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact><SMALL><A name=4></A></SMALL><FONT 
      size=5>Entidad 4: Qué hacer para que tenga más canales</FONT></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/01.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="01_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif" size=3>Al igual que cuando queríamos 
que tuviese señal de enable, si ahora queremos más canales, a efectos de la 
entidad, sólo debemos añadirlos.</FONT></P>
<TABLE cellSpacing=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center width="50%" bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3><B>entity multiplexor is port(</B><BR>a,b,c:&nbsp; <B>in</B> 
      <B>bit_vector(3 downto 0)</B>;<BR>control:<B>in</B> <B>bit_vector(1 downto 
      0)</B>;<BR>enable: <B>in</B>&nbsp;<B>bit</B>;<BR>d: &nbsp;&nbsp;&nbsp; 
      <B>out</B> <B>bit_vector(3 downto 0)</B>;<BR><B>);<BR></B></FONT><FONT 
      face="OCR A Extended"><STRONG>end</STRONG> multiplexor;</FONT></TD>
    <TD vAlign=center width="50%" bgColor=#ffffff><FONT 
      face="MS Sans Serif">En este caso, las entradas son <B>a</B>, <B>b</B>, y 
      <B>c</B>, la señal de control es <B>control</B>, la señal de habilitación 
      es <B>enable</B>, y la salida es <B>d</B>. Las entradas y la salida siguen 
      siendo de 4 bits de ancho, y al haber mas de dos, <B>control</B> debe 
      aumentar su anchura a dos bits.</FONT></TD></TR></TBODY></TABLE>
<P align=center>&nbsp;</P>
<DIV align=center>
<CENTER>
<TABLE 
style="PADDING-RIGHT: 1px; MARGIN-TOP: 40px; PADDING-LEFT: 1px; FLOAT: right; MARGIN-RIGHT: 85px" 
cellSpacing=1 width="45%" border=1>
  <TBODY>
  <TR>
    <TD vAlign=center align=middle width="33%"><STRONG><FONT 
      face="MS Sans Serif">control</FONT></STRONG></TD>
    <TD vAlign=center align=middle width="33%"><STRONG><FONT 
      face="MS Sans Serif">enable</FONT></STRONG></TD>
    <TD vAlign=center align=middle width="34%"><STRONG><FONT 
      face="MS Sans Serif">d</FONT></STRONG></TD></TR>
  <TR>
    <TD vAlign=center align=middle width="33%"><FONT 
      face="MS Sans Serif">XX</FONT></TD>
    <TD vAlign=center align=middle width="33%"><FONT 
      face="MS Sans Serif">H</FONT></TD>
    <TD vAlign=center align=middle width="34%"><FONT 
      face="MS Sans Serif">HHHH</FONT></TD></TR>
  <TR>
    <TD vAlign=center align=middle width="33%"><FONT 
      face="MS Sans Serif">LL</FONT></TD>
    <TD vAlign=center align=middle width="33%"><FONT 
      face="MS Sans Serif">L</FONT></TD>
    <TD vAlign=center align=middle width="34%"><FONT 
      face="MS Sans Serif">a</FONT></TD></TR>
  <TR>
    <TD vAlign=center align=middle width="33%"><FONT 
      face="MS Sans Serif">LH</FONT></TD>
    <TD vAlign=center align=middle width="33%"><FONT 
      face="MS Sans Serif">L</FONT></TD>
    <TD vAlign=center align=middle width="34%"><FONT 
      face="MS Sans Serif">b</FONT></TD></TR>
  <TR>
    <TD vAlign=center align=middle width="33%"><FONT 
      face="MS Sans Serif">HL</FONT></TD>
    <TD vAlign=center align=middle width="33%"><FONT 
      face="MS Sans Serif">L</FONT></TD>
    <TD vAlign=center align=middle width="34%"><FONT 
      face="MS Sans Serif">c</FONT></TD></TR>
  <TR>
    <TD vAlign=center align=middle width="33%"><FONT 
      face="MS Sans Serif">HH</FONT></TD>
    <TD vAlign=center align=middle width="33%"><FONT 
      face="MS Sans Serif">L</FONT></TD>
    <TD vAlign=center align=middle width="34%"><FONT 
      face="MS Sans Serif">HHHH</FONT></TD></TR></TBODY></TABLE></CENTER></DIV>
<P align=center><FONT face=Verdana><IMG height=184 src="01_archivos/ex01-06.gif" 
width=224 vspace=10 border=1></FONT></P>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact><SMALL><A name=5></A></SMALL><FONT 
      size=5>Arquitectura 1: Estilo<I> algorítmico</I>&nbsp; o de 
      <EM>comportamiento</EM> usando la entidad 4</FONT></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/01.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="01_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif" size=3>El estilo <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/02.htm#5">algorítmico</A> es una 
forma de programación en la cual se usan los elementos propios de un lenguaje de 
programación, es decir, ciclos <I>for</I>,&nbsp; <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/04.htm#6">while</A>, 
<I>case</I>,...&nbsp; Para un multiplexor, parece hecha a la medida la sentencia 
<A href="http://det.bp.ehu.es/vhdl/pagina/completo/04.htm#5">case</A>, y para 
comprobar si la entrada enable está habilitada un ciclo <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/04.htm#6">for</A>. Una forma de 
implementar el multiplexor correspondiente a la entidad 4 sería la siguiente: 
</FONT></P>
<TABLE cellSpacing=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=top width=54 bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3><B>1</B><BR><B>2</B><BR><B>3</B><BR><B>4</B><BR><B>5</B><BR><B>6</B><BR><B>7</B><BR><B>8</B><BR><B>9</B><BR><B>10</B><IMG 
      height=11 
      alt="Si cambia una o más de las variables entre paréntesis, se ejecuta el proceso." 
      src="01_archivos/image02.gif" width=25><BR><B>11</B><BR><B>12</B><IMG 
      height=11 alt="Si enable vale '1', entonces la salida d vale '1111'" 
      src="01_archivos/image02.gif" width=25><BR><B>13</B><IMG height=11 
      alt="Si no se cumple lo anterior y si enable vale '0' entonces se ejecuta la sentencia case" 
      src="01_archivos/image02.gif" width=25><BR><B>14</B><BR><B>15</B><IMG 
      height=11 
      alt="En el caso de que control valga '00', entonces la salida d vale lo que valga la entrada a" 
      src="01_archivos/image02.gif" width=25><BR><B>16</B><IMG height=11 
      alt="En el caso de que control valga '01', entonces la salida d vale lo que valga la entrada b" 
      src="01_archivos/image02.gif" width=25><BR><B>17</B><IMG height=11 
      alt="En el caso de que control valga '10', entonces la salida d vale lo que valga la entrada c" 
      src="01_archivos/image02.gif" width=25><BR><B>18</B><IMG height=11 
      alt="En el caso de que control tenga un valor que no sea alguno de los especificados anteriormente, la salida d vale '1111'" 
      src="01_archivos/image02.gif" 
      width=25><BR><B>19</B><BR><B>20</B><BR><B>21<BR>22</B></FONT></TD>
    <TD vAlign=top width=414 bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3><STRONG>entity</STRONG> multi <STRONG>is</STRONG> 
      <STRONG>port(</STRONG><BR>a, b, c :<STRONG>in&nbsp; bit_vector(3 downto 
      0);</STRONG><BR>enable&nbsp; :<STRONG>in&nbsp; bit;</STRONG><BR>control 
      :<STRONG>in&nbsp; bit_vector(1 downto 
      0);</STRONG><BR>d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :<STRONG>out 
      bit_vector(3 downto 
      0)</STRONG><BR><STRONG>);</STRONG><BR><STRONG>end</STRONG> 
      multi;<BR><STRONG>architecture</STRONG> archmul <STRONG>of</STRONG> multi 
      <STRONG>is</STRONG><BR><STRONG>begin</STRONG><BR><STRONG>process 
      (</STRONG>a, b, c, control, 
      enable<STRONG>)</STRONG><BR><STRONG>begin</STRONG><BR><STRONG>if</STRONG> 
      enable='1' <STRONG>then</STRONG> d&lt;="1111";<BR><STRONG>elsif</STRONG> 
      enable='0' <STRONG>then</STRONG><BR>&nbsp;&nbsp;&nbsp; 
      <STRONG>case</STRONG> control 
      <STRONG>is</STRONG><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      <STRONG>when</STRONG> "00" =&gt; d &lt;= 
      a;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <STRONG>when</STRONG> 
      "01" =&gt; d &lt;= b;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      <STRONG>when</STRONG> "10" =&gt; d &lt;= 
      c;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <STRONG>when</STRONG> 
      <STRONG>others</STRONG> =&gt; d &lt;= "1111";<BR>&nbsp;&nbsp;&nbsp; 
      <STRONG>end case</STRONG>;<BR><STRONG>end if;<BR>end process;<BR>end 
      </STRONG>archmul<STRONG>;</STRONG></FONT></TD>
    <TD vAlign=top width=286 bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3>&nbsp; <BR>&nbsp; <BR>&nbsp; <BR>&nbsp; <BR>&nbsp; <BR>&nbsp; 
      <BR>&nbsp; <BR>Cabecera del programa<BR>Empieza el programa<BR>Cabecera de 
      un proceso<BR>Empieza el proceso<BR>&nbsp; Sentencia 
      if<BR>&nbsp;&nbsp;&nbsp;&nbsp; Sentencia 
      elsif<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sentencia case<BR>&nbsp;&nbsp; 
      <BR>&nbsp;&nbsp; <BR>&nbsp;&nbsp; <BR>&nbsp;&nbsp; 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Acaba sentencia 
      case<BR>&nbsp;&nbsp;Acaba sentencia if y elsif<BR>&nbsp;Acaba el 
      proceso<BR>Finaliza el programa</FONT></TD></TR></TBODY></TABLE>
<P><FONT face="MS Sans Serif">Debemos ver lo siguiente en este ejercicio:</FONT> 

<UL>
  <LI><FONT face="MS Sans Serif">Entre las líneas 9 y 22 es donde se encuentra 
  toda la operatividad del programa, es decir que hacemos con las entradas para 
  que se conviertan en las salidas. </FONT>
  <LI><FONT face="MS Sans Serif">En la línea 10 empieza un proceso (<A 
  href="http://det.bp.ehu.es/vhdl/pagina/completo/05.htm#2"><STRONG>process</STRONG></A>), 
  el cual acaba en la línea 21. Si alguna de las variables que están dentro del 
  paréntesis cambia, el proceso se ejecuta. Una vez ejecutado el proceso cambian 
  las señales, <U>no durante él.</U></FONT> 
  <LI><FONT face="MS Sans Serif">En la línea 12 hay una sentencia&nbsp; que 
  acaba en la línea 20. Si se cumple la condición que está después de la palabra 
  <STRONG>if</STRONG>, se ejecuta lo que está después de la palabra 
  <STRONG>then</STRONG>. En caso de que la condición no se cumpla, se evalúa lo 
  que está detrás de la palabra <STRONG>elsif</STRONG>, y si es verdad se 
  ejecuta lo que está después del segundo else. Si se cumple la primera 
  condición, es decir, que <STRONG>enable</STRONG> valga "1", el multiplexor 
  pasa a tener a la salida el valor "1111". Si no se cumple, pasa a ejecutarse 
  una <STRONG>case</STRONG>. <A 
  href="http://det.bp.ehu.es/vhdl/pagina/completo/04.htm#4">Pulsa aquí para ver 
  la sentencia if.</A> <A 
  href="http://det.bp.ehu.es/vhdl/pagina/completo/04.htm#5">Pulsa aquí para ver 
  la sentencia case.</A></FONT> 
  <LI><FONT face="MS Sans Serif">La sentencia case empieza en la línea 14 y 
  acaba en la 29. Según los valores que tome <STRONG>control</STRONG>, la salida 
  <STRONG>d</STRONG> tendrá un valor u otro. </FONT>
  <LI><FONT face="MS Sans Serif">Todas las sentencias que se abran deben estar 
  correctamente cerradas con la palabra clave <STRONG>end</STRONG>. Debemos 
  saber que al cerrar una sentencia <STRONG>if</STRONG> también cerramos a la 
  vez todas las sentencias <STRONG>elsif</STRONG> asociadas a ese 
  <STRONG>if</STRONG>. Lo mismo ocurre con el programa principal, el cual 
  debemos cerrar con <STRONG>end</STRONG> y el nombre de la arquitectura.</FONT> 

  <LI><FONT face="MS Sans Serif">La sentencia <STRONG>case</STRONG> debe estar 
  siempre dentro de un proceso para que la sintaxis esté correcta.</FONT> 
</LI></UL>
<TABLE width="100%">
  <TBODY>
  <TR>
    <TD width="25%"></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm"><IMG height=25 
      alt="Qué debes saber antes de simular" src="01_archivos/image09.jpg" 
      width=187 lowsrc=image09.gif border=0></A></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/practica/multi01.vhd"><IMG 
      height=24 alt="Pulsa aquí para ver el código fuente" 
      src="01_archivos/image10.jpg" width=182 lowsrc=image10.gif 
border=0></A></TD>
    <TD width="25%"></TD></TR></TBODY></TABLE>
<P align=center>&nbsp;</P>
<P align=center>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact><SMALL><A name=6></A></SMALL><FONT 
      size=5>Arquitectura 2: Estilo <I>flujo de datos</I> usando la entidad 
      2</FONT></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/completo/01.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="01_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P><FONT face="MS Sans Serif">El estilo de <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/02.htm#5">flujo de datos</A> nos 
muestra la funcionalidad de un dispositivo mediante ecuaciones ejecutadas 
concurrentemente, es decir, todas a la vez. Mediante las sentencias and, xor, 
not, and,.. transformamos las entradas en las salidas. Para el ejemplo del 
multiplexor de dos canales de un bit con "enable" el esquema de puertas lógicas 
es el siguiente:</FONT></P>
<P align=center><IMG height=122 
alt="Esquema en base a puertas lógicas del multipexor de la entidad 2" 
src="01_archivos/ex01-07.gif" width=339 border=1></P>
<TABLE cellSpacing=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=top width=54 bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3><B>1</B><BR><B>2</B><BR><B>3</B><BR><B>4</B><BR><B>5</B><BR><B>6</B><BR><B>7</B><BR><B>8</B><BR><B>9</B><BR><B>10</B><BR><B>11</B><IMG 
      height=11 alt="Aux1 es el producto lógico de b por control negado" 
      src="01_archivos/image02.gif" width=25><BR><B>12</B><IMG height=11 
      alt="Aux2 es el producto lógico de a por control" 
      src="01_archivos/image02.gif" width=25><BR><B>13</B><IMG height=11 
      alt="Aux3 es la suma lógica de aux1 más aux2" 
      src="01_archivos/image02.gif" width=25><BR><B>14</B><IMG height=11 
      alt="La salida c es el producto lógico de enable y aux3" 
      src="01_archivos/image02.gif" width=25><BR><B>15</B></FONT></TD>
    <TD vAlign=top width=414 bgColor=#ffffff><FONT 
      face="OCR A Extended"><STRONG>entity</STRONG> multi <STRONG>is 
      port(</STRONG><BR>a,b&nbsp;&nbsp;&nbsp;&nbsp; : <STRONG>in&nbsp; 
      bit;</STRONG><BR>control : <STRONG>in&nbsp; bit;</STRONG><BR>enable&nbsp; 
      : <STRONG>in&nbsp; bit;</STRONG><BR>c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      :<STRONG> out bit</STRONG><BR><STRONG>);</STRONG></FONT><FONT 
      face="OCR A Extended" size=3><BR><STRONG>end</STRONG> 
      multi;<BR><STRONG>architecture</STRONG> archmul <STRONG>of</STRONG> multi 
      <STRONG>is<BR>signal</STRONG> aux1,aux2,aux3<STRONG>: 
      bit;<BR>begin</STRONG><BR>aux1 &lt;= b <STRONG>and</STRONG> 
      (<STRONG>not</STRONG>(control))<STRONG>;<BR></STRONG>aux2 &lt;= a 
      <STRONG>and</STRONG> control<STRONG>;<BR></STRONG>aux3 &lt;= aux1 
      <STRONG>or</STRONG> aux2<STRONG>;<BR></STRONG>c&nbsp;&nbsp;&nbsp; &lt;= 
      enable <STRONG>and</STRONG> aux3<STRONG>;<BR>end 
      </STRONG>archmul<STRONG>;</STRONG></FONT></TD>
    <TD vAlign=top width=286 bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3>&nbsp; <BR>&nbsp; <BR>&nbsp; <BR>&nbsp; <BR>&nbsp; <BR>&nbsp; 
      <BR>&nbsp; <BR>Cabecera del programa<BR>Declaración de señales<BR>Empieza 
      el programa<BR>&nbsp; Sentencia concurrente<BR>&nbsp; Sentencia 
      concurrente<BR>&nbsp; Sentencia concurrente<BR>&nbsp; Sentencia 
      concurrente<BR>Finaliza el programa</FONT></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Recordemos que unas <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/05.htm#1">sentencias <U>son 
concurrentes</A> si se ejecutan todas a la vez</U>. De este código debemos 
destacar estas dos cuestiones:</FONT></P>
<UL>
  <LI><FONT face="MS Sans Serif">En la línea 9 se declaran las señales aux1, 
  aux2 y aux3, que son señales intermedias que no forman parte de la entrada ni 
  de la salida y que las utilizamos para hacer más cómodamente la estructuración 
  del programa. Si estas señales, el código sería más confuso aunque igualmente 
  válido, ya que de no usarlas deberíamos haber sustituido las líneas de la 11 a 
  la 14 por la siguiente:</FONT> </LI></UL>
<TABLE width="100%" bgColor=#ffffff border=0>
  <TBODY>
  <TR>
    <TD width="100%"><FONT face="OCR A Extended">d &lt;= enable 
      <STRONG>and</STRONG> ( (b <STRONG>and</STRONG> 
      (<STRONG>not</STRONG>(control)) <STRONG>or</STRONG> (a 
      <STRONG>and</STRONG> control) 
)<STRONG>;</STRONG></FONT></TD></TR></TBODY></TABLE>
<UL>
  <LI><FONT face="MS Sans Serif">La explicación de las sentencias que están en 
  la línea 11 a la 14 habla por si solas sin más que mirar el código. Con una 
  simple inspección comprobamos que se corresponde con el gráfico situado sobre 
  el código.</FONT> </LI></UL>
<P><FONT face="MS Sans Serif">Este tipo de <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/02.htm#5">estilo</A> es solo 
recomendable usarlo en "estado puro" solo para diseños tan sencillos , siendo de 
verdadera utilidad al usarlo como complemento del estilo algorítmico y en 
ocasiones del estructural. A partir de ahora la única forma en que la veamos 
será esta: como complemento.</FONT></P>
<TABLE width="100%">
  <TBODY>
  <TR>
    <TD width="25%"></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm"><IMG height=28 
      alt="Qué debes saber antes de simular" src="01_archivos/image09.jpg" 
      width=211 lowsrc=image09.gif border=0></A></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/practica/multi02.vhd"><IMG 
      height=28 alt="Pulsa aquí para ver el código fuente" 
      src="01_archivos/image10.jpg" width=211 lowsrc=image10.gif 
border=0></A></TD>
    <TD width="25%"></TD></TR></TBODY></TABLE>
<P align=center>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact><SMALL><A name=7></A></SMALL><FONT 
      size=5>Arquitectura 3: Estilo <I>estructural</I>&nbsp; usando la entidad 
      2</FONT></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/completo/01.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="01_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">El estilo <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/02.htm#5">estructural</A> es 
fácilmente reconocible porque la operatividad del programa no se puede leer del 
código ya que está formado íntegramente por componentes y las señales que les 
unen a otros. Es decir, está formado por bloques o cajas negras a los cuales 
metemos información y sacamos las salidas, las cuales podrán o no ir a otros 
bloques. Para esto debemos conocer la operatividad de estos bloques, los cuales 
suelen estar en librerías. Para usar las puertas que están en el paquete 
<STRONG>gatespkg</STRONG> debemos primero invocar a la librería 
<STRONG>ieee</STRONG> (léase "i e cubo") como está expuesto en la primera línea 
de la entidad que debemos usar. Para usar el paquete (o sub-librería) 
<STRONG>gatespkg</STRONG> la llamaremos de la forma en que está en la segunda 
línea. Estas librerías vienen incluidas en la versión 3.5 del programa WARP, de 
Cypress Semiconductor.</FONT></P>
<P align=center><IMG height=122 
alt="Esquema de la arquitectura correspondiente a la entidad 2" 
src="01_archivos/ex01-08.gif" width=339 border=1></P>
<TABLE cellSpacing=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=top width=61 bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3><B>1</B><BR><B>2</B><BR><B><BR>3</B><BR><B>4</B><BR><B>5</B><BR><B>6</B><BR><B>7</B><BR><B>8</B><BR><B>9</B><BR><B>10</B><BR><B>11</B><BR><B>12</B><BR><B>13</B><IMG 
      height=11 
      alt="Llamamos a la entidad INV que está en la librería GATESPKG, en la cual introducimos CONTROL y sacamos AUX0." 
      src="01_archivos/image02.gif" width=25><BR><B>14</B><IMG height=11 
      alt="Llamamos a la entidad AND2 que está en la librería GATESPKG, en la cual introducimos B y AUX0 y sacamos AUX1." 
      src="01_archivos/image02.gif" width=25><BR><B>15</B><IMG height=11 
      alt="Llamamos a la entidad AND2 que está en la librería GATESPKG, en la cual introducimos A y CONTROL y sacamos AUX2." 
      src="01_archivos/image02.gif" width=25><BR><B>16</B><IMG height=11 
      alt="Llamamos a la entidad OR2 que está en la librería GATESPKG, en la cual introducimos AUX1 y AUX2 y sacamos AUX3." 
      src="01_archivos/image02.gif" width=25><BR><B>17</B><IMG height=11 
      alt="Llamamos a la entidad AND2 que está en la librería GATESPKG, en la cual introducimos AUX3 y ENABLE y sacamos C, que es la salida." 
      src="01_archivos/image02.gif" width=25><B><BR>18<BR>19</B></FONT></TD>
    <TD vAlign=top width=407 bgColor=#ffffff><FONT 
      face="OCR A Extended"><STRONG>library</STRONG> 
      ieee;<BR><STRONG>use</STRONG> 
      <STRONG>work</STRONG>.gatespkg.<STRONG>all</STRONG>;<BR><BR><STRONG>entity</STRONG> 
      multi <STRONG>is</STRONG> <STRONG>port</STRONG>(<BR>a,b : 
      <STRONG>in</STRONG> <STRONG>bit</STRONG>;<BR>control : <STRONG>in</STRONG> 
      <STRONG>bit</STRONG>;<BR>enable : <STRONG>in</STRONG> 
      <STRONG>bit</STRONG>;<BR>c : <STRONG>out</STRONG> 
      <STRONG>bit</STRONG><BR>);<BR><STRONG>end</STRONG> 
      multi;<BR><STRONG>architecture</STRONG> archmul <STRONG>of</STRONG> multi 
      <STRONG>is</STRONG><BR><STRONG>signal</STRONG> aux0,aux1,aux2,aux3: 
      <STRONG>bit</STRONG>;<BR><STRONG>begin</STRONG><BR>puerta0:inv&nbsp; 
      <STRONG>port</STRONG> 
      <STRONG>map</STRONG>(control,aux0)<STRONG>;</STRONG><BR>puerta1:and2 
      <STRONG>port</STRONG> 
      <STRONG>map</STRONG>(b,aux0,aux1)<STRONG>;</STRONG><BR>puerta2:and2 
      <STRONG>port</STRONG> 
      <STRONG>map</STRONG>(a,control,aux2)<STRONG>;</STRONG><BR>puerta3:or2&nbsp; 
      <STRONG>port</STRONG> 
      <STRONG>map</STRONG>(aux1,aux2,aux3)<STRONG>;</STRONG><BR>puerta4:and2 
      <STRONG>port</STRONG> 
      <STRONG>map</STRONG>(enable,aux3,c)<STRONG>;</STRONG><BR><STRONG>end</STRONG> 
      archmul<STRONG>;</STRONG></FONT></TD>
    <TD vAlign=top width=286 bgColor=#ffffff><FONT face="OCR A Extended" 
      size=3>Llamamos a la librería IEEE<BR>Llamamos a la librería que tiene las 
      puertas lógicas<BR>&nbsp; <BR>&nbsp; <BR>&nbsp; <BR>&nbsp; <BR>&nbsp; 
      <BR>&nbsp; <BR>&nbsp; <BR>Cabecera del programa<BR>Declaración de 
      señales<BR>Empieza el programa<BR>&nbsp; Sentencia concurrente<BR>&nbsp; 
      Sentencia concurrente<BR>&nbsp; Sentencia concurrente<BR>&nbsp; Sentencia 
      concurrente<BR>&nbsp; Sentencia concurrente<BR>Finalizamos el 
      programa</FONT></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">En este ejemplo vemos que debemos hacer 
para usar las librerías que vienen predefinidas con el lenguaje VHDL y más 
concretamente con Warp 3.5 de Cypress Semiconductor. Para trabajar con librerías 
debemos tener en cuenta estos puntos:</FONT></P>
<UL>
  <LI>
  <P align=left><FONT face="MS Sans Serif">La librería debe estar visible para 
  nuestro programa, es decir, debemos decirle al compilador que lo que no está 
  definido por defecto en VHDL debe buscarlo en esa librería. Para ello nuestras 
  primeras líneas del programa deben hacer referencia a la librería que 
  necesitemos. En este ejemplo, se usa la librería <STRONG>ieee</STRONG>. Dentro 
  de la librería está el paquete de puertas lógicas comunes, que vienen en el 
  fichero <STRONG>gatespkg.vhd</STRONG>. Este paquete es el que debemos invocar 
  (ya que no vamos a usar la librería en toda sus extensión, sólo una parte). 
  Para esto debemos conocer el paquete, que utilidades nos puede ofrecer y cual 
  es el orden correcto de las variables entre paréntesis. Para ello no hay más 
  remedio que ir llevando una lista con las librerías que vayamos conociendo y 
  estudiar la estructura de las librerías por dentro.</FONT></P>
  <LI>
  <P align=left><FONT face="MS Sans Serif">Una vez que hemos cargado la 
  librería, la usamos de la forma expuesta en las líneas de la 13 a la 17, 
  indicando que parte de la librería usamos (<STRONG>inv</STRONG>, 
  <STRONG>and2</STRONG>, <STRONG>or2</STRONG>,...) seguido de las palabras 
  claves <STRONG>port map</STRONG>, y entre paréntesis las señales que 
  introducimos en las estructuras de las librerías. En estos casos, la última 
  señal suele ser la que sacamos, aunque no tiene porque se así. Para más 
  información detén del cursor al lado del icono de ayuda en la línea 
  correspondiente.</FONT></P></LI></UL>
<P align=left><FONT face="MS Sans Serif">Si alguien cambiase el contenido de la 
librería e hiciese que el bloque <STRONG>and2</STRONG> dejase de ser una puerta 
and de dos entradas, nuestro diseño no sería correcto, ya que no haría lo que 
nosotros pretendemos en un principio. Por ésto, debemos estar seguros de que 
función realiza una parte de una librería antes de usarla.</FONT></P>
<P align=left><FONT face="MS Sans Serif">Al igual que el estilo de flujo de 
datos, este estilo es poco usado en estado puro, usándose solamente para unir 
diseños complejos creados anteriormente.</FONT></P>
<TABLE width="100%">
  <TBODY>
  <TR>
    <TD width="25%"></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm"><IMG height=28 
      alt="Qué debes saber antes de simular" src="01_archivos/image09.jpg" 
      width=211 lowsrc=image09.gif border=0></A></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/practica/multi03.vhd"><IMG 
      height=28 alt="Pulsa aquí para ver el código fuente" 
      src="01_archivos/image10.jpg" width=211 lowsrc=image10.gif 
border=0></A></TD>
    <TD width="25%"></TD></TR></TBODY></TABLE>
<P align=center>&nbsp;</P>
<P align=center><IMG height=10 alt="Separa01.gif (636 bytes)" 
src="01_archivos/separa01.gif" width=708></P>
<DL>
  <DD>
  <P align=center>&nbsp;</P></DD></DL></BODY></HTML>
