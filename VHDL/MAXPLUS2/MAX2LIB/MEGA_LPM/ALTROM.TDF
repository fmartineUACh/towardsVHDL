--------------------------------------------------------------------
--
--	ALTROM Parameterized Megafunction
--
--	Copyright (C) 1991-1997 Altera Corporation
--	Any megafunction design, and related net list (encrypted or decrypted),
--	support information, device programming or simulation file, and any other
--	associated documentation or information provided by Altera or a partner
--	under Altera's Megafunction Partnership Program may be used only to
--	program PLD devices (but not masked PLD devices) from Altera.  Any other
--	use of such megafunction design, net list, support information, device
--	programming or simulation file, or any other related documentation or
--	information is prohibited for any other purpose, including, but not
--	limited to modification, reverse engineering, de-compiling, or use with
--	any other silicon devices, unless such use is explicitly licensed under
--	a separate agreement with Altera or a megafunction partner.  Title to
--	the intellectual property, including patents, copyrights, trademarks,
--	trade secrets, or maskworks, embodied in any such megafunction design,
--	net list, support information, device programming or simulation file, or
--	any other related documentation or information provided by Altera or a
--	megafunction partner, remains with Altera, the megafunction partner, or
--	their respective licensors.  No other licenses, including any licenses
--	needed under any third party's intellectual property, are provided herein.
--
--	Version 1.0
--
--------------------------------------------------------------------

INCLUDE "memmodes.inc";			% Constants defining ROM mode flags %
INCLUDE "lpm_decode.inc";
INCLUDE "lpm_mux.inc";

PARAMETERS
(
	WIDTH,
	AD_WIDTH,
	NUMWORDS = 2^AD_WIDTH,
	FILE,
	REGISTERINPUTMODE = "DEFAULT",
	DEVICE_FAMILY
);

CONSTANT 10K_SLICE_SIZE = 2048;
CONSTANT MAX_NUMWORDS = 2^AD_WIDTH;
CONSTANT WORDS_PER_EAB = (MAX_NUMWORDS >= 10K_SLICE_SIZE) ?
							10K_SLICE_SIZE : MAX_NUMWORDS;
CONSTANT BITS_PER_EAB = (MAX_NUMWORDS >= 10K_SLICE_SIZE) ?
							1 : 10K_SLICE_SIZE div WORDS_PER_EAB;

CONSTANT ROM_DEPTH_IN_EABS	= (MAX_NUMWORDS > 10K_SLICE_SIZE) ?
								CEIL(NUMWORDS div 10K_SLICE_SIZE)	% Wider than 10K_SLICE_SIZE %
								: 1;	% Width <= 10K_SLICE_SIZE %
-- ROM width in EABs	= CEIL(WIDTH div BITS_PER_EAB);
CONSTANT EXTRA_ADDR_BITS	= AD_WIDTH - LOG2(WORDS_PER_EAB);

% Figure out EAB mode if FLEX10K %
DEFINE ROM_MODES(dummy) =
	  (USED(clocki) ? (REGISTERINPUTMODE == "ALL" # REGISTERINPUTMODE == "DEFAULT" ? ROM_REG_ADDR # ROM_REG_CTRL
						: (REGISTERINPUTMODE == "ADDRESS_CONTROL" ? ROM_REG_ADDR # ROM_REG_CTRL
							: 0))
		: 0)
	# (USED(clocko) ? ROM_REG_DATAOUT : 0);

% Are the address inputs registered? %
DEFINE ADDR_IS_REGD(dummy) =
	(USED(clocki) & ( REGISTERINPUTMODE == "ALL"
					# REGISTERINPUTMODE == "DEFAULT"
					# REGISTERINPUTMODE == "ADDRESS_CONTROL"));

SUBDESIGN altrom
(
	address[AD_WIDTH-1..0]	: INPUT;
	clocki					: INPUT = VCC;
	clocko					: INPUT = VCC;
	q[WIDTH-1..0]			: OUTPUT;
)
VARIABLE
	IF (DEVICE_FAMILY == "FLEX10K") GENERATE

		content	: MEMORY
		(
			width			= WIDTH;
			depth			= NUMWORDS;
			segmentsize		= WORDS_PER_EAB;
			mode			= ROM_MODES(0) # ROM_INITIALIZED # ROM_READONLY;
			file			= File;
		)
		OF SEGMENTS
		(
			segment[ROM_DEPTH_IN_EABS-1..0][WIDTH-1..0]
		);

		IF (EXTRA_ADDR_BITS > 0) GENERATE
			IF (ADDR_IS_REGD(0)) GENERATE
				reg_iaddr[EXTRA_ADDR_BITS-1..0]	: DFF;
			END GENERATE;
			IF (USED(clocko)) GENERATE
				reg_oaddr[EXTRA_ADDR_BITS-1..0]	: DFF;
			END GENERATE;
			mux			: lpm_mux WITH (LPM_WIDTH=WIDTH,
										LPM_SIZE=ROM_DEPTH_IN_EABS,
										LPM_WIDTHS=EXTRA_ADDR_BITS);
		END GENERATE;
	END GENERATE;

BEGIN

	ASSERT (WIDTH > 0)
			REPORT "Value of WIDTH parameter must be greater than 0"
			SEVERITY ERROR
			HELP_ID ROM_WIDTH;

	ASSERT (AD_WIDTH > 0)
			REPORT "Value of AD_WIDTH parameter must be greater than 0"
			SEVERITY ERROR
			HELP_ID ROM_AD_WIDTH;

	ASSERT (NUMWORDS > 0)
			REPORT "Value of NUMWORDS parameter must be greater than 0"
			SEVERITY ERROR
			HELP_ID ROM_NUMWORDS;

	ASSERT (NUMWORDS > 2^(AD_WIDTH-1) & NUMWORDS <= 2^AD_WIDTH)
			REPORT "Value of NUMWORDS parameter requires % address lines, but AD_WIDTH value, which defines the number of address lines, is %"
				CEIL(LOG2(NUMWORDS)), AD_WIDTH
			SEVERITY ERROR
			HELP_ID ROM_NUMWORDS_TOO_BIG;


	ASSERT (  (REGISTERINPUTMODE == "ALL")
			# (REGISTERINPUTMODE == "ADDRESS_CONTROL")
			# (REGISTERINPUTMODE == "DEFAULT"))
			REPORT "Illegal value for REGISTERINPUTMODE parameter (%) -- value must be ALL, ADDRESS_CONTROL, or DEFAULT" 
				REGISTERINPUTMODE
			SEVERITY ERROR
			HELP_ID ROM_INVALID_INPUT_MODE;

	ASSERT (USED(clocki) # (REGISTERINPUTMODE == "DEFAULT"))
			REPORT "Value of REGISTERINPUTMODE parameter (%) is not consistent with the use of the clocki port"
				REGISTERINPUTMODE
			SEVERITY ERROR
			HELP_ID ROM_REG_INPUT_NEEDS_CLOCK;

	IF (DEVICE_FAMILY == "FLEX10K") GENERATE
		IF (EXTRA_ADDR_BITS > 0) GENERATE

			% Registered address and control inputs? %
			IF (ADDR_IS_REGD(0)) GENERATE
				reg_iaddr[].clk = clocki;
				reg_iaddr[].d = address[AD_WIDTH-1..AD_WIDTH-EXTRA_ADDR_BITS];
			END GENERATE;
			IF (USED(clocko)) GENERATE
				reg_oaddr[].clk = clocko;
				IF (ADDR_IS_REGD(0)) GENERATE
					reg_oaddr[].d = reg_iaddr[].q;
				ELSE GENERATE
					reg_oaddr[].d = address[AD_WIDTH-1..AD_WIDTH-EXTRA_ADDR_BITS];
				END GENERATE;
			END GENERATE;

			% Connect multiplexer ports %
			IF (USED(clocko)) GENERATE
				mux.sel[] = reg_oaddr[].q;
			ELSE GENERATE
				IF (ADDR_IS_REGD(0)) GENERATE
					mux.sel[] = reg_iaddr[].q;
				ELSE GENERATE
					% Nothing is registered %
					mux.sel[] = address[AD_WIDTH-1..AD_WIDTH-EXTRA_ADDR_BITS];
				END GENERATE;
			END GENERATE;
			
		END GENERATE;

		-- Connect ROM ports

		FOR bank IN 0 TO ROM_DEPTH_IN_EABS-1 GENERATE
			FOR bit IN 0 TO WIDTH-1 GENERATE
				segment[bank][bit].a[] 	= address[LOG2(WORDS_PER_EAB)-1..0];
				
				% Using output clock? %
				IF (USED(ClockI)) GENERATE
					segment[bank][bit].clki = clocki;
				END GENERATE;

				% Using output clock? %
				IF (USED(ClockO)) GENERATE
					segment[bank][bit].clko = clocko;
				END GENERATE;
			END GENERATE;

			% define multiplexer inputs %
			IF (EXTRA_ADDR_BITS > 0) GENERATE
				mux.data[bank][] = segment[bank][].q;
			END GENERATE;
		END GENERATE;

		% define the output group %
		IF (EXTRA_ADDR_BITS > 0) GENERATE
			q[] = mux.result[];
		ELSE GENERATE
			q[] = segment[0][].q;
		END GENERATE;
	ELSE GENERATE

		ASSERT (DEVICE_FAMILY == "FLEX10K")
			REPORT "Current device family (%) does not support implementation of ROM"
				DEVICE_FAMILY
			SEVERITY ERROR
			HELP_ID ROM_AVAILABILITY;

	END GENERATE;
END;

