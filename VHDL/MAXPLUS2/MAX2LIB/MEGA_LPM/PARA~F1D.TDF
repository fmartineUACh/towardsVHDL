--------------------------------------------------------------------
--
--	PARALLEL_ADD Parameterized Megafunction
--
--	Copyright (C) 1991-1997 Altera Corporation
--	Any megafunction design, and related net list (encrypted or decrypted),
--	support information, device programming or simulation file, and any other
--	associated documentation or information provided by Altera or a partner
--	under Altera's Megafunction Partnership Program may be used only to
--	program PLD devices (but not masked PLD devices) from Altera.  Any other
--	use of such megafunction design, net list, support information, device
--	programming or simulation file, or any other related documentation or
--	information is prohibited for any other purpose, including, but not
--	limited to modification, reverse engineering, de-compiling, or use with
--	any other silicon devices, unless such use is explicitly licensed under
--	a separate agreement with Altera or a megafunction partner.  Title to
--	the intellectual property, including patents, copyrights, trademarks,
--	trade secrets, or maskworks, embodied in any such megafunction design,
--	net list, support information, device programming or simulation file, or
--	any other related documentation or information provided by Altera or a
--	megafunction partner, remains with Altera, the megafunction partner, or
--	their respective licensors.  No other licenses, including any licenses
--	needed under any third party's intellectual property, are provided herein.
--
--	Version 1.0
--
--------------------------------------------------------------------
--==========================================================--
-- Design Name:	par_add										--	
-- Function: 	par_add adds SIZE number of unsigned/signed	--
--				numbers of width WIDTH, with each input 	--
--				i = 1, 2, ..., SIZE-1 shifted by SHIFT bits --
--				to the right with respect to input i-1.		--
--				The adder can be piplined by assigning a 	--
--				non-zero value to the PIPELINE parameter 	--
--				and connecting clock (and, optionally, 		--
--				aclr) ports. This adder design employs a 	--
--				parallel addition scheme using a tree 		--
--				structure for FLEX/FAST and all pipelined 	--
--				cases, and uses Carry-Save adders (CSAs) 	--
--				for the	remaining ones.						-- 
--															--
--	Note:		The recommended value for WIDTHR parameter,	--
--				the width of addition result, for full		--
--				precision is:								--
--															--
--		WIDTHR = WIDTH + (SIZE-1)*SHIFT + CEIL(LOG2(SIZE))	--
--				where CEIL(X) is the smallest integer 		--
--				greater or equal to X.						--
--															--
--				For AHDL designs (only), one can invoke 	--
--				the macro 									--
--					CALC_PADD_WIDTHR(WIDTH, SIZE, SHIFT)	--
--				upon instantiation to calculate WIDTHR.		--
-- 				For larger values of WIDTHR, the result		--
--				will be sign extended. For values smaller	--
--				than the above value, only the WIDTHR upper	--
--				bits of the result will be taken.			-- 
--==========================================================--
INCLUDE "pcpa_add";
INCLUDE "csa_add";
INCLUDE "altshift";


PARAMETERS 
(
	WIDTH,						-- Width of input data (in bits)			
	SIZE,						-- Number of input numbers
	WIDTHR,						-- Desired width of result (see note above)
	SHIFT = 0,					-- relative shift of data vectors
	REPRESENTATION = "UNSIGNED",	-- SIGNED/UNSIGNED addition
	PIPELINE = 0,				-- Latency of pipelined adder
	DEVICE_FAMILY,
	CARRY_CHAIN
);

CONSTANT LATENCY = PIPELINE;
-- a useful function
DEFINE MIN(a, b) = (a < b) ? a : b;

-- Height of the CPA_based paraller adder.
CONSTANT CPA_LEVELS 	= (SIZE == 1) ? 1 : CEIL(LOG2(SIZE));
CONSTANT TOT_LEVELS 	= CPA_LEVELS;

-- Determine the full width (full significant) of output (sum)
CONSTANT FULL_WIDTHR 	= (SIZE == 1) ? WIDTH :
						  (SIZE-1)*SHIFT + WIDTH + CPA_LEVELS;

-- For non-pipelined and single-level cases, internal latency is simply 0,
-- For pipelined cases, it's the maximum usable latency attainable from 
-- adder tree. 						   
CONSTANT INT_LATENCY	= LATENCY == 0 ? 0 : (MIN(TOT_LEVELS-1, LATENCY));

-- The remaing part of latency is attained through use of external registers	
CONSTANT EXT_LAT_DEPTH 	= (LATENCY <= TOT_LEVELS-1) ? 0 : (LATENCY - TOT_LEVELS + 1);
CONSTANT EXT_LAT_WIDTH 	= (WIDTHR >= FULL_WIDTHR)? FULL_WIDTHR : WIDTHR;
	
				   
SUBDESIGN parallel_add
( 
	data[SIZE-1..0][WIDTH-1..0]		: INPUT = GND;
	clock							: INPUT = GND;
	aclr							: INPUT = GND;								
 	result[WIDTHR-1..0] 			: OUTPUT;
)


VARIABLE 	
	
	-- Instantiate a parallel adder structure. For non-pipelined FLEX/NORMAL and
	-- MAX cases, will use a CSA-based adder tree to reduce propagation delays,
	-- but will use a CPA-based adder for all other cases. 
	IF !USED(clock) & !((DEVICE_FAMILY == "FLEX8000" # DEVICE_FAMILY == "FLEX10K") & 
		CARRY_CHAIN != "IGNORE") & ((REPRESENTATION == "SIGNED" & SHIFT <= 1) # 
									 REPRESENTATION == "UNSIGNED") GENERATE
									 
		-- Note! CSA adder has size and width parameters swapped.
		padder	: csa_add WITH (SIZE = FULL_WIDTHR, WIDTH = SIZE, END_ADDER = 1);

	ELSE GENERATE
		padder	: pcpa_add WITH (TOT_LEVELS = TOT_LEVELS,
								 STAGE = 0, LATENCY = INT_LATENCY);
	END GENERATE;

	-- If external latency is non-zero, then we need extra registers.
	IF EXT_LAT_WIDTH > 0 GENERATE
		external_latency_ffs	: altshift WITH (WIDTH = EXT_LAT_WIDTH, 
												 DEPTH = EXT_LAT_DEPTH);	
	END GENERATE;
	

BEGIN

 	ASSERT REPORT "WIDTH = %, SIZE = %, WIDTHR = %, FULL_WIDTHR = %" 
		 	 WIDTH,  SIZE,  WIDTHR, FULL_WIDTHR SEVERITY DEBUG; 
		 	 
 	ASSERT (REPRESENTATION == "SIGNED" # REPRESENTATION == "UNSIGNED")
			REPORT "Illegal value for REPRESENTATION parameter (""%"") -- value must be ""SIGNED"" or ""UNSIGNED""" 
				REPRESENTATION
			SEVERITY ERROR
			HELP_ID PAR_ADD_REPRESENTATION;

	ASSERT (WIDTH > 0)
                        REPORT "Value of WIDTH parameter must be greater than 0"
			SEVERITY ERROR
			HELP_ID PAR_ADD_WIDTH;

	ASSERT (USED(clock) ? LATENCY > 0 : LATENCY == 0)
			REPORT "Value of PIPELINE parameter must be greater than 0 if clock input is used and vice versa"
			SEVERITY ERROR
			HELP_ID PAR_ADD_CLOCK_WITHOUT_LATENCY;

	ASSERT (LATENCY <= INT_LATENCY)
			REPORT "Value of PIPELINE parameter (%) should be lower -- use % for best performance/utilization" LATENCY, INT_LATENCY
			SEVERITY INFO
			HELP_ID PAR_ADD_CLOCK_LATENCY_VALUE;

 	ASSERT (SHIFT < WIDTH)
                REPORT "Value of WIDTH parameter must be greater than SHIFT"
		SEVERITY ERROR
		HELP_ID PAR_ADD_WIDTH_SHIFT;

	IF 	!USED(clock) & !((DEVICE_FAMILY == "FLEX8000" # 
		DEVICE_FAMILY == "FLEX10K") & CARRY_CHAIN != "IGNORE") & 
		((REPRESENTATION == "SIGNED" & SHIFT <= 1) # 
		REPRESENTATION == "UNSIGNED") GENERATE
		
		-- The first input is not shifted ...
		padder.data[0][WIDTH-1..0] = data[0][];
		IF SIZE > 1 GENERATE	
			-- If more than one input, sign extend the first input and ...
			IF REPRESENTATION == "UNSIGNED" GENERATE	
				padder.data[0][FULL_WIDTHR-1..WIDTH] = GND;
			ELSE GENERATE
				padder.data[0][FULL_WIDTHR-1..WIDTH] = data[0][WIDTH-1];
			END GENERATE;
	
			-- ... connect other inputs to the CSA-based adder
			FOR I IN 1 TO SIZE-1 GENERATE
				IF SHIFT > 0 GENERATE
					padder.data[I][I*SHIFT-1..0] = GND;
				END GENERATE;
				padder.data[I][I*SHIFT+WIDTH-1..I*SHIFT] = data[I][];

				IF REPRESENTATION == "UNSIGNED" GENERATE	
					padder.data[I][FULL_WIDTHR-1..I*SHIFT+WIDTH] = GND;
				ELSE GENERATE
					padder.data[I][FULL_WIDTHR-1..I*SHIFT+WIDTH] = data[I][WIDTH-1];
				END GENERATE;
			END GENERATE;
		END GENERATE;

	ELSE GENERATE
		-- In this case, the pcpa adder will take care of internal shifts
		-- so simply connect the input data to the adder.
		padder.data[SIZE-1..0][] = data[SIZE-1..0][];
	END GENERATE;

	-- Connections to external latency FFs.
 	IF WIDTHR <= FULL_WIDTHR GENERATE
		-- when fewer result bits are desired.
		external_latency_ffs.data[] = padder.result[FULL_WIDTHR-1..FULL_WIDTHR-WIDTHR];
		result[] = external_latency_ffs.result[];
		
	ELSE GENERATE 			
		-- When extension of result bits to the left is needed 
		external_latency_ffs.data[] = padder.result[FULL_WIDTHR-1..0];
		result[FULL_WIDTHR-1..0] = external_latency_ffs.result[];

		-- Perform sign extension of the output
		IF REPRESENTATION == "UNSIGNED" GENERATE
			result[WIDTHR-1..FULL_WIDTHR] = GND;
		ELSE GENERATE
			result[WIDTHR-1..FULL_WIDTHR] = external_latency_ffs.result[FULL_WIDTHR-1];
		END GENERATE;
	END GENERATE;

	-- parallel adder clock connections
	IF USED(clock) GENERATE
		padder.(clock, aclr) = (clock, aclr);	
	END GENERATE;
					
	-- External latency FFs clock connections
	IF EXT_LAT_DEPTH > 0 GENERATE
		external_latency_ffs.(clock, aclr) = (clock, aclr);
	END GENERATE;
	
END;
