<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0047)http://det.bp.ehu.es/vhdl/pagina/express/07.htm -->
<HTML><HEAD><TITLE>Práctica 7: Restador</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="Daniel Jiménez Iglesias          danieljimenez@mailcity.com" 
name=Author>
<META content="Daniel Jiménez Iglesias y Juan Carlos Cárdenas Bonelli" 
name=Author>
<META content="Juan Carlos Cárdenas Bonelli     juanky.cardenas@mailcity.com" 
name=Author>
<META content="MSHTML 5.50.4134.100" name=GENERATOR></HEAD>
<BODY bgProperties=fixed background=07_archivos/fondo00.jpg>
<SCRIPT language=JavaScript><!--
MSFPhover = 
  (((navigator.appName == "Netscape") && 
  (parseInt(navigator.appVersion) >= 3 )) || 
  ((navigator.appName == "Microsoft Internet Explorer") && 
  (parseInt(navigator.appVersion) >= 4 ))); 
function MSFPpreload(img) 
{
  var a=new Image(); a.src=img; return a; 
}
// -->

</SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav1n=MSFPpreload('boto10.jpg'); 
MSFPnav1h=MSFPpreload('boto11.jpg'); }
// --></SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav2n=MSFPpreload('boto20.jpg'); 
MSFPnav2h=MSFPpreload('boto21.jpg'); }
// --></SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav3n=MSFPpreload('boto30.jpg'); 
MSFPnav3h=MSFPpreload('boto31.jpg'); }
// --></SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav4n=MSFPpreload('boto40.jpg'); 
MSFPnav4h=MSFPpreload('boto41.jpg'); }
// --></SCRIPT>

<DIV align=center>
<CENTER>
<TABLE height=515 cellSpacing=5 cellPadding=2 width="93%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center align=middle width="100%" height=81><A name=0></A><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/06.htm"><IMG height=48 
      alt="Cuádruple Sumador Total" src="07_archivos/image07.jpg" width=68 
      lowsrc=image07.gif border=0></A><SMALL><IMG height=55 
      alt="Práctica 8: Restador" src="07_archivos/ex07-00.jpg" width=462 
      lowsrc=images/ex07-00.gif></SMALL><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/08.htm"><IMG height=48 
      alt=Multiplicador src="07_archivos/image08.jpg" width=68 
      lowsrc=image08.gif border=0></A><BR>&nbsp; </TD></TR>
  <TR>
    <TD vAlign=center align=left width="100%" height=66><FONT face=Verdana 
      size=2>Un restador es un dispositivo lógico que recibe dos números a la 
      entrada, A y B, y a la salida nos da su diferencia, admitiendo una posible 
      llevada de una operación anterior y proporcionándonos un na 
    nueva.</FONT></TD></TR>
  <TR>
    <TD vAlign=center align=middle width="100%" height=66><SMALL><FONT 
      face=Verdana>
      <P align=left>Los restadores utilizan el formato de complemento a dos para 
      representar los números negativos.</FONT></SMALL></P>
      <P align=left><SMALL><FONT face=Verdana>Elige en la lista una práctica 
      para empezar, sin más que pinchar en el botón adecuado. Para volver pulsa 
      el botón que está al lado del título</FONT></SMALL></P></TD></TR>
  <TR>
    <TD align=middle width="100%" height=245>
      <DIV align=left>
      <TABLE style="FLOAT: left" height=179 cellSpacing=4 cellPadding=2 
      width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=center width="28%" height=44>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/07.htm#1"><IMG 
            height=29 alt="Entidad 1" src="07_archivos/enti1.jpg" width=200 
            border=0></A></P></TD>
          <TD vAlign=center width="72%" height=44><FONT face=Arial 
            size=3><STRONG>Restador de cuatro bits</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=45>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/07.htm#2"><IMG 
            height=29 alt="Arquitectura 1" src="07_archivos/arqui1.jpg" 
            width=200 border=0></A></P></TD>
          <TD vAlign=center width="72%" height=45><FONT face=Arial 
            size=3><STRONG>Restador de cuatro bits</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=45>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/07.htm#3"><IMG 
            height=29 alt="Entidad 2" src="07_archivos/enti2.jpg" width=200 
            border=0></A></P></TD>
          <TD vAlign=center width="72%" height=45><FONT face=Arial 
            size=3><STRONG>Restador de cuatro bits (con 
            LPM_PACKAGE)</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=45>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/07.htm#4"><IMG 
            height=29 alt="Arquitectura 2" src="07_archivos/arqui2.jpg" 
            width=200 border=0></A></P></TD>
          <TD vAlign=center width="72%" height=45><FONT face=Arial 
            size=3><STRONG>Restador de cuatro bits (con 
            LPM_PACKAGE)</STRONG></FONT></TD></TR></TBODY></TABLE></DIV>
      <P>&nbsp;</P></TD></TR>
  <TR>
    <TD align=middle width="100%" height=7><IMG height=25 
      alt="Pulsa aquí para simular los ejemplos construidos." 
      src="07_archivos/image03.jpg" 
width=634></TD></TR></TBODY></TABLE></CENTER></DIV>
<P align=center>&nbsp;</P>
<P align=left>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact color=#000000><BIG><BIG><A 
      name=1></A>Entidad 1: </BIG></BIG></FONT><FONT face=Impact size=5>Restador 
      de cuatro bits</FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/07.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="07_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Para crear un restador de cuatro bits, 
se suele usar un cuádruple sumador total y cuatro puertas xor, lo que nos obliga 
a tener dos circuitos integrados. Con VHDL, reducimos esto a un único 
CI.</FONT></P>
<P align=left><FONT face="MS Sans Serif">Nuestra entidad sólo necesita los 
números de entrada (de 4 bits) y el de salida (de 4 bits también). La llevada 
anterior está deshabilitada y la de salida se debe ignorar.</FONT></P>
<DIV align=left>
<TABLE width="100%" bgColor=#ffffff border=0>
  <TBODY>
  <TR>
    <TD width="8%"><FONT 
      face="OCR A Extended">1<BR>2<BR>3<BR>4<BR>5<BR>6<BR>7<BR>8<BR>9</FONT></TD>
    <TD width="92%"><FONT face="OCR A Extended"><STRONG>library</STRONG> 
      ieee;<BR><STRONG>use</STRONG> 
      ieee.std_logic_1164.<STRONG>all</STRONG>;<BR><STRONG>use</STRONG> 
      <STRONG>work</STRONG>.sumador.<STRONG>all</STRONG>;<BR><STRONG>entity</STRONG> 
      resta <STRONG>is</STRONG> <STRONG>port</STRONG> (<BR>a,b: 
      <STRONG>in</STRONG> std_logic_vector(3 <STRONG>downto</STRONG> 0);<BR>sr: 
      <STRONG>in</STRONG> std_logic;<BR>c: <STRONG>out</STRONG> 
      std_logic_vector(3 <STRONG>downto</STRONG> 
      0)<BR>);<BR><STRONG>end</STRONG> resta;</FONT></TD></TR></TBODY></TABLE></DIV>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact color=#000000><BIG><BIG><A 
      name=2></A>Arquitectura 1: </BIG></BIG></FONT><FONT face=Impact 
      size=5>Restador de 4 bits </FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/07.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="07_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Para sumar usaremos la librería 
<STRONG>std_arith</STRONG>, y para restar deberemos sumar al número 
<STRONG>a</STRONG> el complemento a 2 de <STRONG>b</STRONG>. El indicador de si 
sumamos o restamos es la entrada <STRONG>sr</STRONG>.</FONT></P>
<DIV align=center>
<CENTER>
<TABLE height=85 width="100%" bgColor=#ffffff border=0>
  <TBODY>
  <TR>
    <TD vAlign=top width="8%" height=81><STRONG><FONT face="OCR A Extended">1 
      <BR>2 </FONT></STRONG><FONT face="OCR A Extended" size=3><IMG height=11 
      alt="Declaramos una señal auxiliar" src="07_archivos/image02.gif" 
      width=25></FONT><STRONG><FONT face="OCR A Extended"><BR>3 <BR>4 <BR>5 
      <BR>6 </FONT></STRONG><FONT face="OCR A Extended" size=3><IMG height=11 
      alt="Si el bit de menos peso de b es '1' entonces, &quot;aux1&quot; toma el valor de a" 
      src="07_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>7 </FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt='Si no es así, "aux1" es un vextor de cinco ceros.' 
      src="07_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>8 </FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt="Si el bit b(1) es '1' entonces, &quot;aux2&quot; toma el valor de a, pero con un cero a su derecha" 
      src="07_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>9 </FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt='Si no es así, "aux2" es un vextor de cinco ceros.' 
      src="07_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>10</FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt="Si el bit b(2) es '1' entonces, &quot;aux3&quot; toma el valor de a, pero con dos ceros a su derecha" 
      src="07_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>11</FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt='Si no es así, "aux3" es un vextor de cinco ceros.' 
      src="07_archivos/image02.gif" width=25></FONT></TD>
    <TD vAlign=top width="70%" height=81><PRE><FONT face="OCR A Extended" size=3><STRONG>architecture</STRONG> archiresta <STRONG>of</STRONG> resta <STRONG>is</STRONG>
<STRONG>signal</STRONG> aux : std_logic_vector(3 <STRONG>downto</STRONG> 0);
<STRONG>begin</STRONG>
 <STRONG>process</STRONG> (a,b,sr,aux)
  <STRONG>begin</STRONG>
  <STRONG>if</STRONG> sr='0' <STRONG>then</STRONG> aux&lt;=b;
  <STRONG>elsif</STRONG> sr='1' <STRONG>then</STRONG> aux&lt;=<STRONG>not</STRONG>(b);
<STRONG>end</STRONG> <STRONG>if</STRONG>;
<STRONG>end</STRONG> <STRONG>process</STRONG>;
 c&lt;=a+aux+("000"&amp;sr);
<STRONG>end</STRONG> archiresta;</FONT></PRE></TD></TR></TBODY></TABLE></CENTER></DIV>
<P align=left><FONT face="MS Sans Serif">Para complementar un número a dos, 
deberemos invertirlo y sumarle uno. La sentencia <STRONG><A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/04.htm#4">if</A> 
</STRONG>invierte al número <STRONG>b</STRONG> si es necesario. Se le suma una 
unidad más adelante.</FONT></P>
<P align=left><FONT face="MS Sans Serif">Para restar deberemos sumar 
<STRONG>a</STRONG>, la señal <STRONG>aux</STRONG> y la señal de suma/resta, para 
acabar de complementar a dos el número <STRONG>b</STRONG>.</FONT></P>
<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="25%"></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm"><IMG height=28 
      alt="Qué debes saber antes de simular" src="07_archivos/image09.jpg" 
      width=211 lowsrc=image09.gif border=0></A></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/practica/resta01.vhd"><IMG 
      height=28 alt="Pulsa aquí para ver el código fuente" 
      src="07_archivos/image10.jpg" width=211 lowsrc=image10.gif 
border=0></A></TD>
    <TD width="25%"></TD></TR></TBODY></TABLE>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact color=#000000><BIG><BIG><A 
      name=1></A>Entidad 2: </BIG></BIG></FONT><FONT face=Impact size=5>Restador 
      de 4 bits (con LPM_PAKCAGE)</FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/07.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="07_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Para crear este restador/sumador de 
cuatro bits, vamos a usar la librería <A 
href="http://det.bp.ehu.es/vhdl/pagina/compleo/02.htm#7">LPM_PACKAGE.</A> Es una 
librería de módulos parametrizables, la cual sirve para cualquier anchura de 
datos de entrada. Sólamente habra que declararla para poder usarla, como se 
muestra en la siguiente entidad:</FONT></P>
<DIV align=left>
<TABLE width="100%" bgColor=#ffffff border=0>
  <TBODY>
  <TR>
    <TD width="8%"><STRONG><FONT face="OCR A Extended">1<BR>2<BR>3<BR>4<BR>5 
      </FONT></STRONG><FONT face="OCR A Extended" size=3><IMG height=11 
      alt="Los números a restar" src="07_archivos/image02.gif" 
      width=25></FONT><STRONG><FONT face="OCR A Extended"><BR>6 
      </FONT></STRONG><FONT face="OCR A Extended" size=3><IMG height=11 
      alt="La llevada anterior y la señal de suma/resta" 
      src="07_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>7 </FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 alt="El resultado" src="07_archivos/image02.gif" 
      width=25></FONT><STRONG><FONT face="OCR A Extended"><BR>8 
      </FONT></STRONG><FONT face="OCR A Extended" size=3><IMG height=11 
      alt="La llevada de salida y el overflow" src="07_archivos/image02.gif" 
      width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>9<BR>10</FONT></STRONG></TD>
    <TD width="92%"><FONT face="OCR A Extended" 
      size=3><STRONG>library</STRONG> ieee;<BR><STRONG>use</STRONG> 
      ieee.std_logic_1164.<STRONG>all</STRONG>;<BR><STRONG>use</STRONG> 
      <STRONG>work</STRONG>.lpmpkg.<STRONG>all</STRONG>;<BR><STRONG>entity</STRONG> 
      resta <STRONG>is</STRONG> <STRONG>port</STRONG> 
      (<BR>a,b:&nbsp;&nbsp;&nbsp;&nbsp; <STRONG>in</STRONG>&nbsp; 
      std_logic_vector(3 <STRONG>downto</STRONG> 0);<BR>cin,sr:&nbsp; 
      <STRONG>in</STRONG>&nbsp; 
      std_logic;<BR>c:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <STRONG>out</STRONG> 
      std_logic_vector(3 <STRONG>downto</STRONG> 0);<BR>cout,ov: 
      <STRONG>out</STRONG> std_logic<BR>);<BR><STRONG>end</STRONG> 
    resta;</FONT></TD></TR></TBODY></TABLE></DIV>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact color=#000000><BIG><BIG><A 
      name=2></A>Arquitectura 2: </BIG></BIG></FONT><FONT face=Impact 
      size=5>Restador de 4 bits </FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/07.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="07_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">La arquitectura es muy sencilla, ya que 
sólamente requiere conocer cómo funciona el módulo <STRONG>madd_sub </STRONG>que 
es el usado para sumar/restar. Ello se consigue usando la documentación que 
viene incluido con WARP2, y que se puede consultar <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/02.htm#7">aquí</A>.</FONT></P>
<DIV align=center>
<CENTER>
<TABLE height=85 width="100%" bgColor=#ffffff border=0>
  <TBODY>
  <TR>
    <TD vAlign=top width="4%" height=81><STRONG><FONT face="OCR A Extended">1 
      <BR>2 <BR>3 <BR>4 <BR>5 <BR>6 </FONT></STRONG></TD>
    <TD vAlign=top width="74%" height=81><PRE><FONT face="OCR A Extended" size=3><STRONG>architecture</STRONG> archiresta <STRONG>of</STRONG> resta <STRONG>is</STRONG>
<STRONG>begin</STRONG>
restador: Madd_sub
	<STRONG>generic</STRONG> <STRONG>map</STRONG>(4,lpm_unsigned,lpm_no_typ,speed)
	<STRONG>port</STRONG> <STRONG>map</STRONG>(a,b,cin,sr,c,cout,ov);
<STRONG>end</STRONG> archiresta;</FONT></PRE></TD></TR></TBODY></TABLE></CENTER></DIV>
<P align=left><FONT face="MS Sans Serif">Para complementar un número a dos, 
deberemos invertirlo y sumarle uno. La sentencia <STRONG><A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/04.htm#4">if</A> 
</STRONG>invierte al número <STRONG>b</STRONG> si es necesario. Se le suma una 
unidad más adelante.</FONT></P>
<P align=left><FONT face="MS Sans Serif">Para restar deberemos sumar 
<STRONG>a</STRONG>, la señal <STRONG>aux</STRONG> y la señal de suma/resta, para 
acabar de complementar a dos el número <STRONG>b</STRONG>.</FONT></P>
<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="25%"></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm"><IMG height=28 
      alt="Qué debes saber antes de simular" src="07_archivos/image09.jpg" 
      width=211 lowsrc=image09.gif border=0></A></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/practica/resta02.vhd"><IMG 
      height=28 alt="Pulsa aquí para ver el código fuente" 
      src="07_archivos/image10.jpg" width=211 lowsrc=image10.gif 
border=0></A></TD>
    <TD width="25%"></TD></TR></TBODY></TABLE>
<P align=center><IMG height=10 alt="Separa01.gif (636 bytes)" 
src="07_archivos/separa01.gif" width=708></P>
<DL>
  <DD>
  <P align=center>&nbsp;</P></DD></DL></BODY></HTML>
