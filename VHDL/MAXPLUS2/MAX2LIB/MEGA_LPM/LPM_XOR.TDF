--------------------------------------------------------------------
--
--	LPM_XOR Parameterized Megafunction
--
--	Copyright (C) 1991-1997 Altera Corporation
--	Any megafunction design, and related net list (encrypted or decrypted),
--	support information, device programming or simulation file, and any other
--	associated documentation or information provided by Altera or a partner
--	under Altera's Megafunction Partnership Program may be used only to
--	program PLD devices (but not masked PLD devices) from Altera.  Any other
--	use of such megafunction design, net list, support information, device
--	programming or simulation file, or any other related documentation or
--	information is prohibited for any other purpose, including, but not
--	limited to modification, reverse engineering, de-compiling, or use with
--	any other silicon devices, unless such use is explicitly licensed under
--	a separate agreement with Altera or a megafunction partner.  Title to
--	the intellectual property, including patents, copyrights, trademarks,
--	trade secrets, or maskworks, embodied in any such megafunction design,
--	net list, support information, device programming or simulation file, or
--	any other related documentation or information provided by Altera or a
--	megafunction partner, remains with Altera, the megafunction partner, or
--	their respective licensors.  No other licenses, including any licenses
--	needed under any third party's intellectual property, are provided herein.
--
--	Version 1.0
--
--------------------------------------------------------------------

PARAMETERS
(
	LPM_WIDTH,
	LPM_SIZE
);

SUBDESIGN lpm_xor
(
	data[LPM_SIZE-1..0][LPM_WIDTH-1..0]	: INPUT;
	result[LPM_WIDTH-1..0]				: OUTPUT;
)

VARIABLE
	xor_cascade[LPM_WIDTH-1..0][LPM_SIZE-1..0]	: NODE;

BEGIN

	ASSERT (LPM_WIDTH > 0)
			REPORT "Value of LPM_WIDTH parameter value must be greater than 0"
			SEVERITY ERROR
			HELP_ID LPM_XOR_WIDTH;

	ASSERT (LPM_SIZE > 0)
			REPORT "Value of LPM_SIZE parameter value must be greater than 0"
			SEVERITY ERROR
			HELP_ID LPM_XOR_SIZE;

	FOR each_bit IN 0 TO LPM_SIZE-1 GENERATE

		% First bit starts chain %
		IF (each_bit == 0) GENERATE
			xor_cascade[][0] = data[0][];
		ELSE GENERATE
			xor_cascade[][each_bit] =
				data[each_bit][] $ xor_cascade[][each_bit-1];
		END GENERATE;
	END GENERATE;
	result[] = xor_cascade[][LPM_SIZE-1];
END;
