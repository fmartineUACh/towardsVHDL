<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0047)http://det.bp.ehu.es/vhdl/pagina/express/08.htm -->
<HTML><HEAD><TITLE>Práctica 8: Multiplicador</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="Daniel Jiménez Iglesias          danieljimenez@mailcity.com" 
name=Author>
<META content="Daniel Jiménez Iglesias y Juan Carlos Cárdenas Bonelli" 
name=Author>
<META content="Juan Carlos Cárdenas Bonelli     juanky.cardenas@mailcity.com" 
name=Author>
<META content="MSHTML 5.50.4134.100" name=GENERATOR></HEAD>
<BODY bgProperties=fixed background=08_archivos/fondo00.jpg>
<SCRIPT language=JavaScript><!--
MSFPhover = 
  (((navigator.appName == "Netscape") && 
  (parseInt(navigator.appVersion) >= 3 )) || 
  ((navigator.appName == "Microsoft Internet Explorer") && 
  (parseInt(navigator.appVersion) >= 4 ))); 
function MSFPpreload(img) 
{
  var a=new Image(); a.src=img; return a; 
}
// -->

</SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav1n=MSFPpreload('boto10.jpg'); 
MSFPnav1h=MSFPpreload('boto11.jpg'); }
// --></SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav2n=MSFPpreload('boto20.jpg'); 
MSFPnav2h=MSFPpreload('boto21.jpg'); }
// --></SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav3n=MSFPpreload('boto30.jpg'); 
MSFPnav3h=MSFPpreload('boto31.jpg'); }
// --></SCRIPT>

<SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav4n=MSFPpreload('boto40.jpg'); 
MSFPnav4h=MSFPpreload('boto41.jpg'); }
// --></SCRIPT>

<DIV align=center>
<CENTER>
<TABLE height=515 cellSpacing=5 cellPadding=2 width="92%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center align=middle width="100%" height=81><A name=top></A><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/07.htm"><IMG height=48 
      alt=Restador src="08_archivos/image07.jpg" width=68 lowsrc=image07.gif 
      border=0></A><SMALL><IMG height=52 alt="Práctica 8: Multiplicador" 
      src="08_archivos/ex08-00.jpg" width=433 
      lowsrc=images/ex08-00.gif></SMALL><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/10.htm"><IMG height=51 
      alt="Flip flops" src="08_archivos/image08.jpg" width=72 lowsrc=image08.gif 
      border=0></A><BR>&nbsp; </TD></TR>
  <TR>
    <TD vAlign=center align=left width="100%" height=66><FONT face=Verdana 
      size=2>Un flip flop es un circuito electrónico, llamdo también simplemente 
      biestable, que tiene dos estados estables. El flip flop es un elemento 
      básico de memoria que es capaz de almacenar un número binario (bit), es 
      decir, que permanece indefinidamente en uno de sus dos estados posibles 
      aunque haya desaparecido la señal de excitación que provocó su transición 
      al estado actual.</FONT></TD></TR>
  <TR>
    <TD vAlign=center align=middle width="100%" height=66><SMALL><FONT 
      face=Verdana>
      <P align=left>Debido a su amplia utilización, los flip flops se han 
      convertido en un elemento elemental dentro de los circuitos secuenciales y 
      con el paso del tiempo se han desarrolado varios tipos: RS, JK, D y 
      T.</FONT></SMALL></P>
      <P align=left><SMALL><FONT face=Verdana>Elige en la lista una práctica 
      para empezar, sin más que pinchar en el botón adecuado. Para volver pulsa 
      el botón que está al lado del título</FONT></SMALL></P></TD></TR>
  <TR>
    <TD align=middle width="100%" height=245>
      <DIV align=left>
      <TABLE style="FLOAT: left" height=158 cellSpacing=4 cellPadding=2 
      width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=center width="28%" height=35>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/08.htm#1"><IMG 
            height=29 alt="Entidad 1" src="08_archivos/enti1.jpg" width=200 
            border=0></A></P></TD>
          <TD vAlign=center width="72%" height=35><FONT face=Arial 
            size=3><STRONG>Multiplicador de 3 bits </STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=35>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/08.htm#2"><IMG 
            height=29 alt="Arquitectura 1" src="08_archivos/arqui1.jpg" 
            width=200 border=0></A></P></TD>
          <TD vAlign=center width="72%" height=35><FONT face=Arial 
            size=3><STRONG>Multiplicador de 3 bits</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=35>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/08.htm#3"><IMG 
            height=29 alt="Entidad 2" src="08_archivos/enti2.jpg" width=200 
            border=0></A></P></TD>
          <TD vAlign=center width="72%" height=35><FONT face=Arial 
            size=3><STRONG>Multiplicador de 3 bits (con 
            STD_ARITH)</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=35>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/08.htm#4"><IMG 
            height=29 alt="Arquitectura 2" src="08_archivos/arqui2.jpg" 
            width=200 border=0></A></P></TD>
          <TD vAlign=center width="72%" height=35><FONT face=Arial 
            size=3><STRONG>Multiplicador de 3 bits (con 
            STD_ARITH)</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=35>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/08.htm#5"><IMG 
            height=29 alt="Entidad 3" src="08_archivos/enti3.jpg" width=200 
            border=0></A></P></TD>
          <TD vAlign=center width="72%" height=35><FONT face=Arial 
            size=3><STRONG>Multiplicador de 3 bits (con 
            LPM_PACKAGE)</STRONG></FONT></TD></TR>
        <TR>
          <TD vAlign=center width="28%" height=1>
            <P><A href="http://det.bp.ehu.es/vhdl/pagina/express/08.htm#6"><IMG 
            height=29 alt="Arquitectura 3" src="08_archivos/arqui3.jpg" 
            width=200 border=0></A></P></TD>
          <TD vAlign=center width="72%" height=1><FONT face=Arial 
            size=3><STRONG>Multiplicador de 3 bits (con 
            LPM_PACKAGE)</STRONG></FONT></TD></TR></TBODY></TABLE></DIV>
      <P>&nbsp;</P></TD></TR>
  <TR>
    <TD align=middle width="100%" height=7><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm"><IMG height=24 
      alt="Pulsa aquí para simular los ejemplos construidos." 
      src="08_archivos/image03.jpg" width=610 
border=0></A></TD></TR></TBODY></TABLE></CENTER></DIV>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact color=#000000><BIG><BIG><A 
      name=1></A>Entidad 1: </BIG></BIG></FONT><FONT face=Impact 
      size=5>Multiplicador de 3 bits</FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/08.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="08_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Para conseguir un multiplicador de 3x3 
bits necesitaríamos bastantes sumadores totales, lo cual nos llevaría a tener 
nueve circuitos integrados si lo implementamos físicamente. El emplear VHDL en 
la descripción de circuitos lógicos nos facilita las tareas de diseño y adamás 
nos puede disminuir el espacio de placa necesario para su implementación y las 
conexiones empleadas para ello.</FONT></P>
<P align=left><FONT face="MS Sans Serif">Para crear un multiplicador de 3x3 
bits, necesitaremos una&nbsp; única cápsula, gracias a VHDL (y cualquier <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/01.htm1">HDL</A>). Nuestro 
circuito va a tener dos entradas de tres bits cada una, y el resultado debe ser 
de seis bits, ya que en el caso que nos da un mayor resultado (7x7=49), 
necesitamos 6 bits para completar el número. </FONT></P>
<DIV align=center>
<CENTER>
<TABLE width="100%" bgColor=#ffffff border=0>
  <TBODY>
  <TR>
    <TD width="7%"><STRONG><FONT face="OCR A Extended">1<BR>2<BR>3<BR><BR>4 
      <BR>5 </FONT></STRONG><FONT face="OCR A Extended" size=3><IMG height=11 
      alt='Los números "a" y "b" son de tres bits de ancho' 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>6 </FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt="El producto, c,  DEBE ser de 6 bits de ancho (3+3)" 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>7</FONT></STRONG></TD>
    <TD width="59%"><FONT face="OCR A Extended"><STRONG>library</STRONG> 
      ieee;<BR><STRONG>use</STRONG> 
      ieee.std_logic_1164.<STRONG>all</STRONG>;<BR><STRONG>use</STRONG> 
      <STRONG>work</STRONG>.std_arith.<STRONG>all</STRONG>;<BR><BR><STRONG>entity</STRONG> 
      multiplicador <STRONG>is</STRONG> 
      <STRONG>port</STRONG>(<BR>a,b:<STRONG>in</STRONG> std_logic_vector(2 
      <STRONG>downto</STRONG> 0);<BR>c:<STRONG>out</STRONG> std_logic_vector(5 
      <STRONG>downto</STRONG> 0));<BR><STRONG>end</STRONG> 
    multiplicador;</FONT></TD></TR></TBODY></TABLE></CENTER></DIV>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact color=#000000><BIG><BIG><A 
      name=2></A>Arquitectura 1: </BIG></BIG></FONT><FONT face=Impact 
      size=5>Multiplicador de 3 bits </FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/08.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="08_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Para multiplicar, nos basaremos en el 
método empleado para multiplicar núeros en formato decimal, es decir, se 
multiplica un número por cada uno de los dígitos del otro teniendo en cuenta el 
peso de cada uno. Al ser en binario, y sólo haber ceros y unos, el multiplicar 
se convierte en un desplazamiento si hay un uno y en una omisión si hay un cero. 
Por eso el código de la arquitectura tiene el aspecto siguiente.</FONT></P>
<DIV align=center>
<CENTER>
<TABLE height=85 width="100%" bgColor=#ffffff border=0>
  <TBODY>
  <TR>
    <TD vAlign=top width="8%" height=81><STRONG><FONT face="OCR A Extended">1 
      <BR>2 </FONT></STRONG><FONT face="OCR A Extended" size=3><IMG height=11 
      alt="Declaramos tres señales que nos harán falta" 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>3 <BR>4 <BR>5 <BR>6 </FONT></STRONG><FONT 
      face="OCR A Extended" size=3><IMG height=11 
      alt="Si el bit de menos peso de b es '1' entonces, &quot;aux1&quot; toma el valor de a" 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>7 </FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt='Si no es así, "aux1" es un vextor de cinco ceros.' 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>8 </FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt="Si el bit b(1) es '1' entonces, &quot;aux2&quot; toma el valor de a, pero con un cero a su derecha" 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>9 </FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt='Si no es así, "aux2" es un vextor de cinco ceros.' 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>10</FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt="Si el bit b(2) es '1' entonces, &quot;aux3&quot; toma el valor de a, pero con dos ceros a su derecha" 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>11</FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt='Si no es así, "aux3" es un vextor de cinco ceros.' 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>12 <BR>13</FONT></STRONG><FONT 
      face="OCR A Extended" size=3><IMG height=11 
      alt='La suma de "aux1", "aux2" y "aux3" se hace FUERA del proceso.' 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>14 </FONT></STRONG></TD>
    <TD vAlign=top width="70%" height=81><PRE><FONT face="OCR A Extended" size=3><STRONG>architecture</STRONG> archimulti <STRONG>of</STRONG> multi <STRONG>is</STRONG>
<STRONG>signal</STRONG> aux1,aux2,aux3: std_logic_vector(5 <STRONG>downto</STRONG> 0);
<STRONG>begin</STRONG>
<STRONG> process</STRONG> (a,b)
  <STRONG>begin</STRONG>
   <STRONG>if</STRONG> b(0)='1' <STRONG>then</STRONG> aux1 &lt;= ('0', '0',  '0',  a(2), a(1), a(0)); 
    <STRONG>elsif</STRONG> b(0)='0' <STRONG>then</STRONG>  aux1&lt;=(<STRONG>others</STRONG> =&gt; '0'); <STRONG>end</STRONG> <STRONG>if</STRONG> ;
   <STRONG>if</STRONG> b(1)='1' <STRONG>then</STRONG> aux2 &lt;= ('0', '0',  a(2), a(1), a(0), '0' ); 
    <STRONG>elsif</STRONG> b(1)='0' <STRONG>then</STRONG>  aux2&lt;=(<STRONG>others</STRONG> =&gt; '0'); <STRONG>end</STRONG> <STRONG>if</STRONG>;
   <STRONG>if</STRONG> b(2)='1' <STRONG>then</STRONG> aux3 &lt;= ('0', a(2), a(1), a(0), '0',  '0' ); 
    <STRONG>elsif</STRONG> b(2)='0' <STRONG>then</STRONG>  aux3&lt;=(<STRONG>others</STRONG> =&gt; '0'); <STRONG>end</STRONG> <STRONG>if</STRONG>;
<STRONG> end</STRONG> <STRONG>process</STRONG>;
c   &lt;=aux1 + aux2 + aux3;
<STRONG>end</STRONG> archimulti;</FONT></PRE></TD></TR></TBODY></TABLE></CENTER></DIV>
<P align=left><FONT face="MS Sans Serif">Hay que destacar que la suma de las 
señales <STRONG>aux1</STRONG>, <STRONG>aux2</STRONG> y <STRONG>aux3</STRONG> se 
hace <U>FUERA</U> del proceso, ya que de no ser así, <STRONG>c</STRONG> no se 
actualizaría correctamente y adoptaría el valor del producto 
anterior.</FONT></P>
<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="25%"></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm"><IMG height=28 
      alt="Qué debes saber antes de simular" src="08_archivos/image09.jpg" 
      width=211 lowsrc=image09.gif border=0></A></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/practica/mul01.vhd"><IMG 
      height=28 alt="Pulsa aquí para ver el código fuente" 
      src="08_archivos/image10.jpg" width=211 lowsrc=image10.gif 
border=0></A></TD>
    <TD width="25%"></TD></TR></TBODY></TABLE>
<P>&nbsp;</P>
<P>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact color=#000000><BIG><BIG><A 
      name=3></A>Entidad 2:</BIG> <BIG>Multiplicador de 3 bits (con 
      STD_ARITH)</BIG></BIG></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/08.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="08_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Esta práctica es ideal para comprobar 
la potencia de VHDL y de sus <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/02.htm#6">librerías</A>. En el 
ejemplo anterior, para multiplicar 3x3 bits, se necesitaba un código muy 
complejo y nada claro para posteriores revisiones. En cambio, si usamos la 
librería <STRONG>std_arith</STRONG> para cargar el operador <STRONG>*</STRONG> 
que nos permitirá multiplicar dos números de cualquier longitud, debiendo ser la 
anchura del resultado la suma de las anchuras de los operandos.</FONT></P>
<P align=left><FONT face="MS Sans Serif">Para la entidad sólo necesitamos 
declarar los dos números a multiplicar y el producto, pero queremos que además 
de hacernos el producto de <STRONG>a</STRONG> y <STRONG>b</STRONG> nos sume un 
número <STRONG>d</STRONG> (de la misma anchura que el producto). Por lo tanto la 
entidad debe ser como se muestra en el ejemplo.</FONT></P>
<DIV align=center>
<CENTER>
<TABLE width="100%" bgColor=#ffffff border=0>
  <TBODY>
  <TR>
    <TD width="7%"><STRONG><FONT face="OCR A Extended">1<BR>2<BR>3<BR><BR>4 
      <BR>5 </FONT></STRONG><FONT face="OCR A Extended" size=3><IMG height=11 
      alt='Los números "a" y "b" son de tres bits de ancho' 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>6 </FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt='El número "d"  es de SEIS bits de ancho, igual que el producto' 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>7 </FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt="El producto, c,  DEBE ser de 6 bits de ancho (3+3)" 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>8</FONT></STRONG></TD>
    <TD width="59%"><FONT face="OCR A Extended"><STRONG>library</STRONG> 
      ieee;<BR><STRONG>use</STRONG> 
      ieee.std_logic_1164.<STRONG>all</STRONG>;<BR><STRONG>use</STRONG> 
      <STRONG>work</STRONG>.std_arith.<STRONG>all</STRONG>;<BR><BR><STRONG>entity</STRONG> 
      multiplicador <STRONG>is</STRONG> 
      <STRONG>port</STRONG>(<BR>a,b:<STRONG>in</STRONG> std_logic_vector(2 
      <STRONG>downto</STRONG> 0);<BR>d: <STRONG>in</STRONG> std_logic_vector(2 
      <STRONG>downto</STRONG> 0);<BR>c:<STRONG>out</STRONG> std_logic_vector(5 
      <STRONG>downto</STRONG> 0));<BR><STRONG>end</STRONG> 
    multiplicador;</FONT></TD>
    <TD width="34%"></TD></TR></TBODY></TABLE></CENTER></DIV>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact color=#000000><BIG><BIG><A 
      name=4></A>Arquitectura 2: Multiplicador de 3 bits (con 
      STD_ARITH)</BIG></BIG></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/08.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="08_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P><FONT face="MS Sans Serif">El ejemplo no podía ser más sencillo, ya que en 
una sóla línea incluimos toda la operatividad que desábamos darle a nuestro 
circuito. Esto es posible a que hemos sobrecargado la librería 
<STRONG>std_arith</STRONG>.</FONT></P>
<DIV align=center>
<CENTER>
<TABLE width="100%" bgColor=#ffffff border=0>
  <TBODY>
  <TR>
    <TD width="7%"><STRONG><FONT face="OCR A Extended">1 <BR>2 <BR>3 
      </FONT></STRONG><FONT face="OCR A Extended" size=3><IMG height=11 
      alt='el número "c" es el resultdo de multiplicar "a" con "b" y sumarle "d".' 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>4 </FONT></STRONG></TD>
    <TD width="62%"><FONT face="OCR A Extended"><STRONG>architecture</STRONG> 
      archimulti <STRONG>of</STRONG> multiplicador 
      <STRONG>is</STRONG><BR><STRONG>begin</STRONG><BR>c&lt;=(a*b) + 
      d;<BR><STRONG>end</STRONG> archimulti;</FONT></TD>
    <TD width="31%"></TD></TR></TBODY></TABLE></CENTER></DIV>
<P><FONT face="MS Sans Serif">Hay que destacar que un circuito multiplicador no 
puede ser implementado en una PLD del tipo 22V10, sino en dispositivos mayores 
como la C374i. Esto es debido a que cada uno de los elementos que componen al 
número <STRONG>c</STRONG> necesita mucho propuctos y sumas lógicas, requiriendo 
mucho espacio de cápsula.</FONT></P>
<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="25%"></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm"><IMG height=28 
      alt="Qué debes saber antes de simular" src="08_archivos/image09.jpg" 
      width=211 lowsrc=image09.gif border=0></A></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/practica/mul02.vhd"><IMG 
      height=28 alt="Pulsa aquí para ver el código fuente" 
      src="08_archivos/image10.jpg" width=211 lowsrc=image10.gif 
border=0></A></TD>
    <TD width="25%"></TD></TR></TBODY></TABLE>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact color=#000000><BIG><BIG><A 
      name=5></A>Entidad 3:</BIG> <BIG>Multiplicador de 3 bits (con LPM 
      PACKAGE)</BIG></BIG></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/08.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="08_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">De nuevo vamos a usar otro de los 
recursos más usuales de VHDL, que es el grupo de librerías <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/02.htm#7">LPM Package</A>, que 
nos permite usar módulos con entradas y salidas de anchura parametrizable, es 
decir, una misma entidad y arquitectura sirve para definir un multiplicador de 
uno, dos, tres, etc. bits sin más que cambiar una serie de 
parámetros.</FONT></P>
<P align=left><FONT face="MS Sans Serif">Para usar estas librerías deberemos 
incluir en la declaración de librerías la línea</FONT></P>
<TABLE cellPadding=0 width="100%" bgColor=#ffffff border=0>
  <TBODY>
  <TR>
    <TD align=middle width="100%"><FONT 
      face="OCR A Extended"><STRONG>use</STRONG> 
      <STRONG>work</STRONG>.lpmpkg.<STRONG>all</STRONG>;</FONT></TD></TR></TBODY></TABLE>
<P align=left><FONT face="MS Sans Serif">Para la entidad sólo necesitamos 
declarar los dos números a multiplicar y el producto, pero queremos que además 
de hacernos el producto de <STRONG>a</STRONG> y <STRONG>b</STRONG> nos sume un 
número <STRONG>d</STRONG> (de la misma anchura que el producto). Por lo tanto la 
entidad debe ser como se muestra en el ejemplo.</FONT></P>
<DIV align=center>
<CENTER>
<TABLE width="100%" bgColor=#ffffff border=0>
  <TBODY>
  <TR>
    <TD width="9%"><STRONG><FONT face="OCR A Extended">1<BR>2<BR>3 
      </FONT></STRONG><FONT face="OCR A Extended" size=3><IMG height=11 
      alt="La llamada a la librería lpm_package" src="08_archivos/image02.gif" 
      width=25></FONT><STRONG><FONT face="OCR A Extended"> <BR><BR>4 <BR>5 
      </FONT></STRONG><FONT face="OCR A Extended" size=3><IMG height=11 
      alt='Los números "dataa" y "datab" son de tres bits de ancho' 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>6 </FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt='El número "sum"  es de SEIS bits de ancho, igual que el producto' 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>7 </FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt='El producto, "result",  DEBE ser de 6 bits de ancho (3+3)' 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>8<BR>9<BR>10 </FONT></STRONG></TD>
    <TD width="59%"><FONT face="OCR A Extended"><STRONG>library</STRONG> 
      ieee;<BR><STRONG>use</STRONG> 
      ieee.std_logic_1164.<STRONG>all</STRONG>;<BR><STRONG>use</STRONG> 
      <STRONG>work</STRONG>.lpmpkg.<STRONG>all</STRONG>;<BR><BR><STRONG>entity</STRONG> 
      multi <STRONG>is</STRONG> <STRONG>port</STRONG>(<BR>dataA&nbsp; : 
      <STRONG>in</STRONG>&nbsp; std_logic_vector(2 <STRONG>downto</STRONG> 
      0);<BR>dataB&nbsp; : <STRONG>in</STRONG>&nbsp; std_logic_vector(2 
      <STRONG>downto</STRONG> 0);<BR>sum&nbsp;&nbsp;&nbsp; : 
      <STRONG>in</STRONG>&nbsp; std_logic_vector(5 <STRONG>downto</STRONG> 
      0);<BR><STRONG>result</STRONG> : <STRONG>out</STRONG> std_logic_vector(5 
      <STRONG>downto</STRONG> 0)<BR>);<BR><STRONG>end</STRONG> multi;</FONT></TD>
    <TD width="32%"></TD></TR></TBODY></TABLE></CENTER></DIV>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="85%"><FONT face=Impact color=#000000><BIG><BIG><A 
      name=6></A>Arquitectura 3: Multiplicador de 3 bits (con LPM 
      PACKAGE)</BIG></BIG></FONT></TD>
    <TD width="7%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/08.htm#top"><IMG height=42 
      alt="Ir al principio de esta página" src="08_archivos/image01.gif" 
      width=59 align=right border=0></A></TD></TR></TBODY></TABLE>
<P><FONT face="MS Sans Serif">Este ejemplo es tan sencillo como el anterior, 
pero su única diferencia está en que se utilizan módulos, es decir, se usa un <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/02.htm#5">estilo 
estructural</A>, no de comportamiento como el ejemplo anterior. La operatividad 
de un circuito descrito con estilo estructural, viene definido por los módulos 
que se usen. Si no se indica que el módulo <STRONG>mmult</STRONG> es un 
multiplicador/sumador, en una revisión posterior, no qedará nada claro que es lo 
que hace este circuito, mientras que si lo hemos hecho con estilo de 
comportamiento o <STRONG>behavioral</STRONG>, es fácil ver qué resultado 
obtenemos.</FONT></P>
<DIV align=center>
<CENTER>
<TABLE width="100%" bgColor=#ffffff border=0>
  <TBODY>
  <TR>
    <TD width="7%"><STRONG><FONT face="OCR A Extended">1 <BR>2 <BR>3 <BR>4 
      </FONT></STRONG><FONT face="OCR A Extended" size=3><IMG height=11 
      alt='La palabra "mul" es una etiqueta, y "mmult" es el nombre del módulo que se usa.' 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>5 </FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt="La documentación de la librería LPM_PACKAGE nos indica cómo introducir los parámetros genéricos (ver lección 2 de la teoría)" 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>6 </FONT></STRONG><FONT face="OCR A Extended" 
      size=3><IMG height=11 
      alt="Se indica los parámetros que se introducen y los que salen del módulo por POSICIÓN." 
      src="08_archivos/image02.gif" width=25></FONT><STRONG><FONT 
      face="OCR A Extended"><BR>7 </FONT></STRONG></TD>
    <TD width="62%"><FONT face="OCR A Extended"><STRONG>use</STRONG> 
      <STRONG>work</STRONG>.lpmpkg.<STRONG>all</STRONG>;<BR><STRONG>architecture</STRONG> 
      archimulti of multi is<BR>begin<BR>mul: mmult <BR>&nbsp;&nbsp;&nbsp; 
      generic map (3,3,6,6)<BR>&nbsp;&nbsp;&nbsp; port 
      map(dataA,dataB,sum,result);<BR>end archimulti;</FONT></TD>
    <TD width="31%"></TD></TR></TBODY></TABLE></CENTER></DIV>
<P><FONT face="MS Sans Serif">Hay que destacar que un circuito multiplicador no 
puede ser implementado en una PLD del tipo 22V10, sino en dispositivos mayores 
como la C374i. Esto es debido a que cada uno de los elementos que componen al 
número <STRONG>result</STRONG> necesita mucho propuctos y sumas lógicas, 
requiriendo mucho espacio de cápsula.</FONT></P>
<P><FONT face="MS Sans Serif">Se debe aclarar que se ha hecho la introducción de 
datos al módulo <STRONG>mmult</STRONG> <A 
href="http://det.bp.ehu.es/vhdl/pagina/completo/05.htm#posicion">por 
posición.</A></FONT></P>
<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="25%"></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/simula.htm"><IMG height=28 
      alt="Qué debes saber antes de simular" src="08_archivos/image09.jpg" 
      width=211 lowsrc=image09.gif border=0></A></TD>
    <TD width="25%"><A 
      href="http://det.bp.ehu.es/vhdl/pagina/express/practica/mul03.vhd"><IMG 
      height=28 alt="Pulsa aquí para ver el código fuente" 
      src="08_archivos/image10.jpg" width=211 lowsrc=image10.gif 
border=0></A></TD>
    <TD width="25%"></TD></TR></TBODY></TABLE>
<P align=center><BR><IMG height=10 alt="Separa01.gif (636 bytes)" 
src="08_archivos/separa01.gif" width=708></P>
<DL>
  <DD>
  <P align=center>&nbsp;</P></DD></DL></BODY></HTML>
