--------------------------------------------------------------------
--
--	LPM_FF Parameterized Megafunction
--
--	Copyright (C) 1991-1997 Altera Corporation
--	Any megafunction design, and related net list (encrypted or decrypted),
--	support information, device programming or simulation file, and any other
--	associated documentation or information provided by Altera or a partner
--	under Altera's Megafunction Partnership Program may be used only to
--	program PLD devices (but not masked PLD devices) from Altera.  Any other
--	use of such megafunction design, net list, support information, device
--	programming or simulation file, or any other related documentation or
--	information is prohibited for any other purpose, including, but not
--	limited to modification, reverse engineering, de-compiling, or use with
--	any other silicon devices, unless such use is explicitly licensed under
--	a separate agreement with Altera or a megafunction partner.  Title to
--	the intellectual property, including patents, copyrights, trademarks,
--	trade secrets, or maskworks, embodied in any such megafunction design,
--	net list, support information, device programming or simulation file, or
--	any other related documentation or information provided by Altera or a
--	megafunction partner, remains with Altera, the megafunction partner, or
--	their respective licensors.  No other licenses, including any licenses
--	needed under any third party's intellectual property, are provided herein.
--
--	Version 1.0
--
--------------------------------------------------------------------

INCLUDE "lpm_constant.inc";

PARAMETERS
(
	LPM_WIDTH,
	LPM_AVALUE = 0,
	LPM_SVALUE = 0,
	LPM_FFTYPE = "DFF"
);

DEFINE ASYNC_USED() = USED(aclr) # USED(aset);

SUBDESIGN lpm_ff
(
	data[LPM_WIDTH-1..0]		: INPUT = GND;
	clock						: INPUT;
	enable						: INPUT = VCC;
	aclr, aset, aload			: INPUT = GND;
	sclr, sset, sload			: INPUT = GND;
	q[LPM_WIDTH-1..0]			: OUTPUT;
)

VARIABLE
	dffs[LPM_WIDTH-1..0]		: DFFE;
	din[LPM_WIDTH-1..0]			: NODE;
	IF (USED(LPM_AVALUE)) GENERATE
		ac	: lpm_constant WITH (LPM_WIDTH=LPM_WIDTH, LPM_CVALUE=LPM_AVALUE);
	END GENERATE;
	IF (USED(LPM_SVALUE)) GENERATE
		sc	: lpm_constant WITH (LPM_WIDTH=LPM_WIDTH, LPM_CVALUE=LPM_SVALUE);
	END GENERATE;

BEGIN

	ASSERT (LPM_WIDTH > 0)
			REPORT "Value of LPM_WIDTH parameter value must be greater than 0"
			SEVERITY ERROR
			HELP_ID LPM_FF_WIDTH;

	ASSERT (LPM_FFTYPE == "DFF" # LPM_FFTYPE == "TFF")
			REPORT "Illegal value for LPM_FFTYPE parameter (%) -- value must be DFF or TFF"
				LPM_FFTYPE
			SEVERITY ERROR
			HELP_ID LPM_FF_TYPE;

	ASSERT (USED(aset) # USED(LPM_AVALUE) == 0)
			REPORT "Ignored LPM_AVALUE parameter because the aset port is not used"
			SEVERITY WARNING
			HELP_ID LPM_FF_AVALUE;

	ASSERT (USED(sset) # USED(LPM_SVALUE) == 0)
			REPORT "Ignored LPM_SVALUE parameter because the sset port is not used"
			SEVERITY WARNING
			HELP_ID LPM_FF_SVALUE;


	% common ports %
	dffs[].ena = enable;
	dffs[].clk = clock;

	% Normal value to be loaded into the DFFE's .d port is din[] %
	IF (LPM_FFTYPE == "DFF") GENERATE
		din[] = data[];
	ELSE GENERATE
		din[] = data[] $ dffs[].q;
	END GENERATE;

	% Asynchronous control logic %
	IF (USED(LPM_AVALUE)) GENERATE
		dffs[].clrn = !aclr & (!aset # ac.result[]) & (aset # !aload # data[]);
		dffs[].prn = aclr # (!aset # !ac.result[]) & (aset # !aload # !data[]);
	ELSE GENERATE
		IF (USED(aclr) # USED(aload)) GENERATE
			dffs[].clrn = !aclr & (aset # !aload # data[]);
		END GENERATE;
		IF (USED(aset) # USED(aload)) GENERATE
			dffs[].prn = aclr # !aset & (!aload # !data[]);
		END GENERATE;
	END GENERATE;

	% Synchronous input logic %
	IF (USED(LPM_SVALUE)) GENERATE
		dffs[].d = !sclr & ( sset & sc.result[]
							# !sset & ( sload & data[]
									  # !sload & din[]));
	ELSE GENERATE
		dffs[].d = !sclr & (sset # ( sload & data[]
									# !sload & din[]));
	END GENERATE;

	% Connect outputs %
	q[] = dffs[].q;
END;
